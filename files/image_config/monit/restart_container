#!/usr/bin/env python
import argparse
import sys
import syslog
import subprocess
import time

CONTAINER_CHECK_INTERVAL_SECS = 1
CONTAINER_RESTART_THRESHOLD_SECS = 180


def get_command_result(command):
    """Executes command and return the exit code, stdout and stderr.

    Args:
        command: A string contains the command to be executed.

    Returns:
        An integer contains the exit code.
        A string contains the output of stdout.
        A string contains the output of stderr.
    """
    command_stdout = ""
    command_stderr = ""

    try:
        proc_instance = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                         shell=True, universal_newlines=True)
        command_stdout, command_stderr = proc_instance.communicate()
        if proc_instance.returncode != 0:
            return 1, command_stdout.strip(), command_stderr.strip()
    except (OSError, ValueError) as err:
        return 2, command_stdout.strip(), err

    return 0, command_stdout.strip(), command_stderr.strip()


def check_container_running(container_name):
    """Check whether a container is in the running state.

    Args:
        container_name: Name of a container.

    Returns:
        None.
    """
    start_time = time.time()
    elapsed_time = 0
    container_state_command = "docker inspect -f \{{\{{.State.Running\}}\}} {}".format(container_name)

    syslog.syslog(syslog.LOG_INFO, "Issues command '{}' to check running status of container '{}' ..."
                  .format(container_state_command, container_name))

    while elapsed_time < CONTAINER_RESTART_THRESHOLD_SECS:
        exit_code, command_stdout, command_stderr = get_command_result(container_state_command)
        if exit_code == 0 and command_stdout == "true":
            syslog.syslog(syslog.LOG_INFO, "Container '{}' is restarted successfully and is in the running state."
                          .format(container_name))
            return

        time.sleep(CONTAINER_CHECK_INTERVAL_SECS)
        elapsed_time = time.time() - start_time

    if elapsed_time >= CONTAINER_RESTART_THRESHOLD_SECS:
        syslog.syslog(syslog.LOG_ERR, "Container '{}' is not running after {} seconds."
                      .format(container_name, CONTAINER_RESTART_THRESHOLD_SECS))


def reset_failed_flag_before_restart(container_name):
    """Reset the failed status of a service.

    Args:
        container_name: Name of the service.

    Returns:
        None
    """
    reset_failed_command = "sudo systemctl reset-failed {}.service".format(container_name)

    syslog.syslog(syslog.LOG_INFO, "Issue command '{}' to reset failed status of service '{}' ..."
                  .format(reset_failed_command, container_name))

    exit_code, command_stdout, command_stderr = get_command_result(reset_failed_command)
    if exit_code == 0:
        syslog.syslog(syslog.LOG_INFO, "Succeeded to reset failed status of service '{}.service'."
                      .format(container_name))
    else:
        syslog.syslog(syslog.LOG_ERR, "Failed to reset failed status of service '{}'. Error: {}"
                      .format(container_name, command_stderr))


def restart_container(container_name):
    """Reset the failed status of a service and then restart the
    corresponding container.

    Args:
        container_name: Name of specified container.

    Returns:
        None.
    """
    restart_command = "sudo systemctl restart {}.service".format(container_name)

    reset_failed_flag_before_restart(container_name)

    syslog.syslog(syslog.LOG_INFO, "Issues command '{}' to restart container '{}' ..."
                  .format(restart_command, container_name))

    exit_code, command_stdout, command_stderr = get_command_result(restart_command)
    if exit_code == 0:
        check_container_running(container_name)
    else:
        syslog.syslog(syslog.LOG_ERR, "Failed to restart the container '{}'. Error: {}"
                      .format(container_name, command_stderr))


def main():
    parser = argparse.ArgumentParser(description="Restart a specific container",
                                     usage="/usr/bin/restart_container <container_name>")
    parser.add_argument("container_name", help="container name")
    args = parser.parse_args()

    restart_container(args.container_name)


if __name__ == "__main__":
    main()
