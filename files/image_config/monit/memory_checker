#!/usr/bin/env python3

"""
memory_checker

This script is part of the feature which will restart the container if memory
usage of it is larger than the threshold value.

This script is used to check the memory usage of specified cotnainer and
is intended to be run by Monit. It will write an alerting message into
syslog if memory usage of the container is larger than the threshold value for X
times within Y cycles/minutes. Note that if print(...) statement in this script
was executed, the string in it will be appended to Monit syslog messages.

The following is an example in Monit configuration file to show how Monit will run
this script:

check program container_memory_<container_name> with path "/usr/bin/memory_checker <container_name>"
    if status == 3 for X times within Y cycles exec "/usr/bin/restart_service <container_name>"
"""

import argparse
import subprocess
import sys
import syslog
import re

import docker

import swsssdk

# The FEATURE table in 'CONFIG_DB' contains high memory alert state
# and memory threshold of each container.
FEATURE_TABLE_NAME = "FEATURE"


def get_command_result(command):
    """Executes the command and return the resulting output.

    Args:
        command: A string contains the command to be executed.

    Returns:
        A string which contains the output of command.
    """
    command_stdout = ""

    try:
        proc_instance = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                         shell=True, universal_newlines=True)
        command_stdout, command_stderr = proc_instance.communicate()
        if proc_instance.returncode != 0:
            syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to execute the command '{}'. Return code: '{}'"
                          .format(command, proc_instance.returncode))
            sys.exit(1)
    except (OSError, ValueError) as err:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to execute the command '{}'. Error: '{}'"
                      .format(command, err))
        sys.exit(2)

    return command_stdout.strip()


def check_memory_usage(container_name, threshold_value):
    """Checks the memory usage of a container and writes an alerting messages into
    the syslog if the memory usage is larger than the threshold value.

    Args:
        container_name: A string represtents name of a container
        threshold_value: An integer indicates the threshold value (Bytes) of memory usage.

    Returns:
        None.
    """
    command = "docker stats --no-stream --format \{{\{{.MemUsage\}}\}} {}".format(container_name)
    command_stdout = get_command_result(command)
    mem_usage = command_stdout.split("/")[0].strip()
    match_obj = re.match(r"\d+\.?\d*", mem_usage)
    if match_obj:
        mem_usage_value = float(mem_usage[match_obj.start():match_obj.end()])
        mem_usage_unit = mem_usage[match_obj.end():]

        mem_usage_bytes = 0.0
        if mem_usage_unit == "B":
            mem_usage_bytes = mem_usage_value
        elif mem_usage_unit == "KiB":
            mem_usage_bytes = mem_usage_value * 1024
        elif mem_usage_unit == "MiB":
            mem_usage_bytes = mem_usage_value * 1024 ** 2
        elif mem_usage_unit == "GiB":
            mem_usage_bytes = mem_usage_value * 1024 ** 3

        if mem_usage_bytes > threshold_value:
            print("[{}]: Memory usage ({} Bytes) is larger than the threshold ({} Bytes)!"
                  .format(container_name, mem_usage_bytes, threshold_value))
            syslog.syslog(syslog.LOG_INFO, "[{}]: Memory usage ({} Bytes) is larger than the threshold ({} Bytes)!"
                          .format(container_name, mem_usage_bytes, threshold_value))
            sys.exit(3)
    else:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to retrieve memory value from '{}'"
                      .format(mem_usage))
        sys.exit(4)


def get_running_container_names():
    """Retrieves names of running containers by talking to the docker daemon.

    Args:
        None.

    Returns:
        running_container_names: A list indicates names of running containers.
    """
    try:
        docker_client = docker.DockerClient(base_url='unix://var/run/docker.sock')
        running_container_list = docker_client.containers.list(filters={"status": "running"})
        running_container_names = [ container.name for container in running_container_list ]
    except (docker.errors.APIError, docker.errors.DockerException) as err:
        syslog.syslog(syslog.LOG_ERR,
                      "Failed to retrieve the running container list from docker daemon! Error message is: '{}'"
                      .format(err))
        sys.exit(5)

    return running_container_names


def get_alert_status_and_threshold(container_name):
    """Retrieves the status of high memory alert and memory threshold of a container 
    from 'Config_DB'.

    Args:
      container_name: A string indicates the name of a container.

    Returns: 
      high_mem_alert_status: A string indicates status of high memory alert.
      mem_threshold: An integer indicates memory threshold of a container.
    """
    config_db = swsssdk.ConfigDBConnector()
    config_db.connect()
    features_table = config_db.get_table(FEATURE_TABLE_NAME)
    if not features_table:
        syslog.syslog(syslog.LOG_ERR, "Failed to retrieve 'FEATURE' table from 'CONFIG_DB'. Exiting...")
        sys.exit(5)

    if container_name not in features_table:
        syslog.syslog(syslog.LOG_ERR, "Failed to retrieve feature '{}' from `FEATURE` table. Exiting..."
                      .format(container_name))
        sys.exit(6)

    high_mem_alert_status = features_table[container_name].get("high_mem_alert")
    mem_threshold = features_table[container_name].get("mem_threshold")
    if not high_mem_alert_status:
        syslog.syslog(syslog.LOG_ERR, "Failed to determine high memory alert status of feature '{}'. Exiting..."
                      .format(container_name))
        sys.exit(7)
    try:
        mem_threshold = int(mem_threshold)
    except ValueError as err:
        syslog.syslog(syslog.LOG_ERR, "Failed to determine memory threshold of feature '{}' and Error is '{}'. Exiting..."
                      .format(container_name, err))
        sys.exit(8)

    return high_mem_alert_status, mem_threshold


def main():
    parser = argparse.ArgumentParser(description="Check memory usage of a container \
            and an alerting message will be written into syslog if memory usage \
            is larger than the threshold value", usage="/usr/bin/memory_checker <container_name>")
    parser.add_argument("container_name", help="container name")
    args = parser.parse_args()

    running_container_names = get_running_container_names()
    if args.container_name in running_container_names:
        high_mem_alert_status, mem_threshold = get_alert_status_and_threshold(args.container_name)
        if "enabled" in high_mem_alert_status:
            check_memory_usage(args.container_name, mem_threshold)
        else:
            syslog.syslog(syslog.LOG_INFO, "High memory alerting of container '{}' is not eabled and Exiting ..."
                          .format(args.container_name))
    else:
        syslog.syslog(syslog.LOG_INFO, "[memory_checker] Container '{}' is not running and Exiting ..."
                      .format(args.container_name))


if __name__ == "__main__":
    main()
