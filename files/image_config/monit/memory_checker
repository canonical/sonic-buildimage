#!/usr/bin/env python3

"""
memory_checker

This script is part of the feature which will restart the container if memory
usage of it is larger than the threshold value.

This script is used to check the memory usage of specified cotnainer and
is intended to be run by Monit. It will write an alerting message into
syslog if memory usage of the container is larger than the threshold value for X
times within Y cycles/minutes. Note that if print(...) statement in this script
was executed, the string in it will be appended to Monit syslog messages.

The following is an example in Monit configuration file to show how Monit will run
this script:

check program container_memory_<container_name> with path "/usr/bin/memory_checker <container_name> <threshold_value>"
    if status == 3 for X times within Y cycles exec "/usr/bin/restart_service <container_name>"
"""

import argparse
import subprocess
import sys
import syslog
import re

CGROUP_DOCKER_MEMORY_DIR = "/sys/fs/cgroup/memory/docker/"


def get_command_result(command):
    """Executes command and returns command's stdout.

    Args:
        command: A string contains the command to be executed.

    Returns:
        A string contains command's stdout.
    """
    command_stdout = ""

    try:
        proc_instance = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                         shell=True, universal_newlines=True)
        command_stdout, command_stderr = proc_instance.communicate()
        if proc_instance.returncode != 0:
            syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to execute the command '{}'. Return code: '{}'"
                          .format(command, proc_instance.returncode))
            sys.exit(1)
    except (OSError, ValueError) as err:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to execute the command '{}'. Error: '{}'"
                      .format(command, err))
        sys.exit(2)

    return command_stdout.strip()


def get_container_id(container_name):
    """Gets full container ID of the specified container

    Args:
        container_name: A string indicates the name of specified container.

    Returns:
        container_id: A string indicates the full ID of specified container.
    """
    container_id = ""

    get_container_info_cmd = "docker ps --no-trunc | grep -i {}".format(container_name)
    command_stdout = get_command_result(get_container_info_cmd)

    for line in command_stdout.splitlines():
        if container_name in line:
            container_id = line.split()[0]
            break

    if not container_id:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to get contianer ID of '{}'!"
                      .format(container_name))
        sys.exit(4)

    return container_id


def get_memory_usage(container_id):
    """Reads the container's memory usage from the control group subsystem's file
    '/sys/fs/cgroup/memory/docker/<container_id>/memory.usage_in_bytes'.

    Args:
        container_id: A string indicates the full ID of a container.

    Returns:
        memory_usage_in_bytes: A string indicates memory usage (Bytes) of a container.
    """
    memory_usage_in_bytes = ""

    docker_memory_usage_file_path = CGROUP_DOCKER_MEMORY_DIR + container_id + "/memory.usage_in_bytes"
    get_memory_usage_cmd = "sudo cat {}".format(docker_memory_usage_file_path)
    memory_usage_in_bytes = get_command_result(get_memory_usage_cmd)
    if not memory_usage_in_bytes:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to get the memory usage of container '{}'!"
                      .format(container_id))
        sys.exit(5)

    return memory_usage_in_bytes


def get_cache_usage(container_id):
    """Reads the container's cache usage from the field 'total_inactive_file' in control
    group subsystem's file '/sys/fs/cgroup/memory/docker/<container_id>/memory.stat'.

    Args:
        container_id: A string indicates the full ID of a container.

    Returns:
        cache_usage_in_bytes: A string indicates the cache usage (Bytes) of a container.
    """
    cache_usage_in_bytes = ""

    docker_memory_stat_file_path = CGROUP_DOCKER_MEMORY_DIR + container_id + "/memory.stat"
    get_cache_usage_cmd = "sudo cat {} | grep -i 'total_inactive_file'".format(docker_memory_stat_file_path)
    command_stdout = get_command_result(get_cache_usage_cmd)

    for line in command_stdout.splitlines():
        if "total_inactive_file" in line:
            cache_usage_in_bytes = line.split()[1]
            break

    if not cache_usage_in_bytes:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to get the cache usage of container '{}'!"
                      .format(container_id))
        sys.exit(6)

    return cache_usage_in_bytes


def check_memory_usage(container_name, threshold_value):
    """Checks the memory usage of a container from its cgroup subsystem and writes an alerting
    messages into the syslog if the memory usage is larger than the threshold value.

    Args:
        container_name: A string represtents name of a container
        threshold_value: An integer indicates the threshold value (Bytes) of memory usage.

    Returns:
        None.
    """
    container_id = get_container_id(container_name)
    syslog.syslog(syslog.LOG_INFO, "[memory_checker] Container ID of '{}' is: '{}'."
                  .format(container_name, container_id))

    memory_usage_in_bytes = get_memory_usage(container_id)
    syslog.syslog(syslog.LOG_INFO, "[memory_checker] The memory usage of container '{}' is '{}' Bytes!"
                  .format(container_name, memory_usage_in_bytes))

    cache_usage_in_bytes = get_cache_usage(container_id)
    syslog.syslog(syslog.LOG_INFO, "[memory_checker] The cache usage of container '{}' is '{}' Bytes!"
                  .format(container_name, cache_usage_in_bytes))

    try:
        memory_usage = int(memory_usage_in_bytes)
        cache_usage = int(cache_usage_in_bytes)
    except ValueError as err:
        syslog.syslog(syslog.LOG_ERR, "[memory_checker] Failed to convert the memory or cache usage in string to integer!")
        sys.exit(7)

    total_memory_usage = memory_usage - cache_usage
    syslog.syslog(syslog.LOG_INFO, "[memory_checker] Total memory usage of container '{}' is '{}' Bytes!"
                  .format(container_name, total_memory_usage))

    if total_memory_usage > threshold_value:
        print("[{}]: Memory usage ({} Bytes) is larger than the threshold ({} Bytes)!"
              .format(container_name, total_memory_usage, threshold_value))
        sys.exit(3)


def main():
    parser = argparse.ArgumentParser(description="Check memory usage of a container \
            and an alerting message will be written into syslog if memory usage \
            is larger than the threshold value", usage="/usr/bin/memory_checker <container_name> <threshold_value_in_bytes>")
    parser.add_argument("container_name", help="container name")
    # TODO: Currently the threshold value is hard coded as a command line argument and will
    # remove this in the new version since we want to read this value from 'CONFIG_DB'.
    parser.add_argument("threshold_value", type=int, help="threshold value in bytes")
    args = parser.parse_args()

    check_memory_usage(args.container_name, args.threshold_value)


if __name__ == "__main__":
    main()
