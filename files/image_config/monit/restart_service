#!/usr/bin/env python3

"""
restart_service

This script is part of the feature which will restart the container if memory
usage of it is larger than the threshold value.

This script is intended to be run by Monit and is used to restart the specified
container if the memory usage of it is larger than the threshold value for X
times within Y cycles/minutes.

The following is an example in Monit configuration file to show how Monit will run
this script:

check program container_memory_<container_name> with path "/usr/bin/memory_checker <container_name> <threshold_value>"
    if status == 3 for X times within Y cycles exec "/usr/bin/restart_service <container_name>"
"""

import argparse
import os
import sys
import syslog
import subprocess


CGROUP_DOCKER_MEMORY_DIR = "/sys/fs/cgroup/memory/docker/"


def get_command_result(command):
    """Executes command and return command's stdout.

    Args:
        command: A string contains the command to be executed.

    Returns:
        A string contains the command's stdout.
    """
    command_stdout = ""

    try:
        proc_instance = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                         shell=True, universal_newlines=True)
        command_stdout, command_stderr = proc_instance.communicate()
        if proc_instance.returncode != 0:
            syslog.syslog(syslog.LOG_ERR, "[restart_service] Failed to execute the command '{}'. Return code: '{}'"
                          .format(command, proc_instance.returncode))
            sys.exit(1)
    except (OSError, ValueError) as err:
        syslog.syslog(syslog.LOG_ERR, "[restart_service] Failed to execute the command '{}'. Error: '{}'"
                      .format(command, err))
        sys.exit(2)

    return command_stdout.strip()


def reset_failed_flag(service_name):
    """Reset the systemd failed status of a service.

    Args:
        service_name: A string indicates name of the service.

    Returns:
        None
    """
    reset_failed_command = "sudo systemctl reset-failed {}.service".format(service_name)

    syslog.syslog(syslog.LOG_INFO, "[restart_service] Resetting failed status of service '{}' ..."
                  .format(service_name))

    command_stdout = get_command_result(reset_failed_command)

    syslog.syslog(syslog.LOG_INFO, "[restart_service] Succeeded in resetting failed status of service '{}.service'."
                  .format(service_name))


def get_container_id(service_name):
    """Gets full container ID of the specified service.

    Args:
        service_name: A string indicates the name of specified container.

    Returns:
        container_id: A string indicates the full ID of specified container.
    """
    container_id = ""

    get_container_info_cmd = "docker ps --no-trunc"
    command_stdout = get_command_result(get_container_info_cmd)

    for line in command_stdout.splitlines():
        if service_name in line:
            container_id = line.split()[0].strip()
            break

    if not container_id:
        syslog.syslog(syslog.LOG_ERR, "[restart_service] Failed to get contianer ID of '{}'! Exiting ..."
                      .format(service_name))
        sys.exit(3)

    return container_id


def get_root_process_id(container_id):
    """Gets root process id of a container by retrieving the first field of file
    '/sys/fs/cgroup/memory/docker/<container_id>/cgroup.procs'.

    Args:
        container_id: A string indicates full ID of specified container.

    Returns:
        root_process_id: A string indicates root process id of specified container.
    """
    root_process_id = ""

    docker_process_file_path = CGROUP_DOCKER_MEMORY_DIR + container_id + "/cgroup.procs"
    if not os.path.exists(docker_process_file_path):
        syslog.syslog(syslog.LOG_ERR, "[restart_service] cgroup process file path '{}' does not exist on device! Exiting ..."
                      .format(docker_process_file_path))
        sys.exit(4)

    get_process_list_cmd = "sudo cat {}".format(docker_process_file_path)
    command_stdout = get_command_result(get_process_list_cmd)

    process_list = command_stdout.splitlines()
    if process_list:
        root_process_id = process_list[0].strip()

    if not root_process_id:
        syslog.syslog(syslog.LOG_ERR, "[restat_service] Failed to get root process id of container '{}'! Exiting ..."
                      .format(container_id))
        sys.exit(5)

    return root_process_id


def restart_service(service_name):
    """Resets the failed status of service and terminates root process of container to do restart.

    Args:
        service_name: A string indicates the name of specified service.

    Returns:
        None.
    """
    container_id = get_container_id(service_name)
    syslog.syslog(syslog.LOG_INFO, "[restart_service] Container ID of '{}' is: '{}'."
                  .format(service_name, container_id))

    root_process_id = get_root_process_id(container_id)
    syslog.syslog(syslog.LOG_INFO, "[restart_service] Root process id of container '{}' is: '{}'"
                  .format(service_name, root_process_id))

    reset_failed_flag(service_name)

    kill_root_process_cmd = "sudo kill -SIGKILL {}".format(root_process_id)
    command_stdout = get_command_result(kill_root_process_cmd)
    syslog.syslog(syslog.LOG_INFO, "[restart_service] Root process with PID '{}' in container '{}' was terminated!"
                  .format(root_process_id, service_name))

    syslog.syslog(syslog.LOG_INFO, "[restart_service] Service '{}' is being restarted ...".format(service_name))


def main():
    parser = argparse.ArgumentParser(description="Restart a specific service",
                                     usage="/usr/bin/restart_service <service_name>")
    parser.add_argument("service_name", help="service name")
    args = parser.parse_args()

    restart_service(args.service_name)


if __name__ == "__main__":
    main()
