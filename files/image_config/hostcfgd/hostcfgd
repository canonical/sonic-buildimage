#!/usr/bin/python -u
# -*- coding: utf-8 -*-

import os
import sys
import subprocess
import syslog
import copy
import jinja2
import ipaddr as ipaddress
import netaddr
from swsssdk import ConfigDBConnector

# FILE
PAM_AUTH_CONF = "/etc/pam.d/common-auth-sonic"
PAM_AUTH_CONF_TEMPLATE = "/usr/share/sonic/templates/common-auth-sonic.j2"
NSS_TACPLUS_CONF = "/etc/tacplus_nss.conf"
NSS_TACPLUS_CONF_TEMPLATE = "/usr/share/sonic/templates/tacplus_nss.conf.j2"
NSS_CONF = "/etc/nsswitch.conf"

# TACACS+
TACPLUS_SERVER_PASSKEY_DEFAULT = ""
TACPLUS_SERVER_TIMEOUT_DEFAULT = "5"
TACPLUS_SERVER_AUTH_TYPE_DEFAULT = "pap"


def is_true(val):
    if val == 'True' or val == 'true':
        return True
    else:
        return False


def sub(l, start, end):
    return l[start:end]


def obfuscate(data):
    if data:
        return data[0] + '*****'
    else:
        return data

class Iptables(object):
    def __init__(self):
        '''
        Default MSS to 1460 - (MTU 1500 - 40 (TCP/IP Overhead))
        For IPv6, it would be 1440 - (MTU 1500 - 60 octects)
        '''
        self.tcpmss = 1460
        self.tcp6mss = 1440

    def is_ip_prefix_in_key(self, key):
        '''
        Function to check if IP address is present in the key. If it
        is present, then the key would be a tuple or else, it shall be
        be string
        '''
        return (isinstance(key, tuple))

    def load(self, lpbk_table):
        for row in lpbk_table:
            self.iptables_handler(row, lpbk_table[row])

    def command(self, chain, ip, ver, op):
        cmd = 'iptables' if ver == '4' else 'ip6tables'
        cmd += ' -t mangle --{} {} -p tcp --tcp-flags SYN SYN'.format(op, chain)
        cmd += ' -d' if chain == 'PREROUTING' else ' -s'
        mss = self.tcpmss if ver == '4' else self.tcp6mss
        cmd += ' {} -j TCPMSS --set-mss {}'.format(ip, mss)

        return cmd

    def iptables_handler(self, key, data, add=True):
        if not self.is_ip_prefix_in_key(key):
            return

        iface, ip = key
        ip_str = ip.split("/")[0]
        ip_addr = ipaddress.IPAddress(ip_str)
        if isinstance(ip_addr, ipaddress.IPv6Address):
            ver = '6'
        else:
            ver = '4'

        self.mangle_handler(ip_str, ver, add)

    def mangle_handler(self, ip, ver, add):
        if not add:
            op = 'delete'
        else:
            op = 'check'

        iptables_cmds = []
        chains = ['PREROUTING', 'POSTROUTING']
        for chain in chains:
            cmd = self.command(chain, ip, ver, op)
            if not add:
                iptables_cmds.append(cmd)
            else:
                '''
                For add case, first check if rule exists. Iptables just appends to the chain
                as a new rule even if it is the same as an existing one. Check this and
                do nothing if rule exists
                '''
                ret = subprocess.call(cmd, shell=True)
                if ret == 0:
                    syslog.syslog(syslog.LOG_INFO, "{} rule exists in {}".format(ip, chain))
                else:
                    # Modify command from Check to Append
                    iptables_cmds.append(cmd.replace("check", "append"))

        for cmd in iptables_cmds:
            syslog.syslog(syslog.LOG_INFO, "Running cmd - {}".format(cmd))
            try:
                subprocess.check_call(cmd, shell=True)
            except subprocess.CalledProcessError as err:
                syslog.syslog(syslog.LOG_ERR, "{} - failed: return code - {}, output:\n{}"
                              .format(err.cmd, err.returncode, err.output))

class AaaCfg(object):
    def __init__(self):
        self.auth_default = {
            'login': 'local',
        }
        self.tacplus_global_default = {
            'auth_type': TACPLUS_SERVER_AUTH_TYPE_DEFAULT,
            'timeout': TACPLUS_SERVER_TIMEOUT_DEFAULT,
            'passkey': TACPLUS_SERVER_PASSKEY_DEFAULT
        }
        self.auth = {}
        self.tacplus_global = {}
        self.tacplus_servers = {}
        self.debug = False

    # Load conf from ConfigDb
    def load(self, aaa_conf, tac_global_conf, tacplus_conf):
        for row in aaa_conf:
            self.aaa_update(row, aaa_conf[row], modify_conf=False)
        for row in tac_global_conf:
            self.tacacs_global_update(row, tac_global_conf[row], modify_conf=False)
        for row in tacplus_conf:
            self.tacacs_server_update(row, tacplus_conf[row], modify_conf=False)
        self.modify_conf_file()

    def aaa_update(self, key, data, modify_conf=True):
        if key == 'authentication':
            self.auth = data
            if 'failthrough' in data:
                self.auth['failthrough'] = is_true(data['failthrough'])
            if 'debug' in data:
                self.debug = is_true(data['debug'])
        if modify_conf:
            self.modify_conf_file()

    def tacacs_global_update(self, key, data, modify_conf=True):
        if key == 'global':
            self.tacplus_global = data
            if modify_conf:
                self.modify_conf_file()

    def tacacs_server_update(self, key, data, modify_conf=True):
        if data == {}:
            if key in self.tacplus_servers:
                del self.tacplus_servers[key]
        else:
            self.tacplus_servers[key] = data

        if modify_conf:
            self.modify_conf_file()

    def modify_single_file(self, filename, operations=None):
        if operations:
            cmd = "sed -e {0} {1} > {1}.new; mv -f {1} {1}.old; mv -f {1}.new {1}".format(' -e '.join(operations), filename)
            os.system(cmd)

    def modify_conf_file(self):
        auth = self.auth_default.copy()
        auth.update(self.auth)
        tacplus_global = self.tacplus_global_default.copy()
        tacplus_global.update(self.tacplus_global)

        servers_conf = []
        if self.tacplus_servers:
            for addr in self.tacplus_servers:
                server = tacplus_global.copy()
                server['ip'] = addr
                server.update(self.tacplus_servers[addr])
                servers_conf.append(server)
            servers_conf = sorted(servers_conf, key=lambda t: int(t['priority']), reverse=True)

        template_file = os.path.abspath(PAM_AUTH_CONF_TEMPLATE)
        env = jinja2.Environment(loader=jinja2.FileSystemLoader('/'), trim_blocks=True)
        env.filters['sub'] = sub
        template = env.get_template(template_file)
        pam_conf = template.render(auth=auth, servers=servers_conf)
        with open(PAM_AUTH_CONF, 'w') as f:
            f.write(pam_conf)

        # Modify common-auth include file in /etc/pam.d/login and sshd
        if os.path.isfile(PAM_AUTH_CONF):
            self.modify_single_file('/etc/pam.d/sshd',  [ "'/^@include/s/common-auth$/common-auth-sonic/'" ])
            self.modify_single_file('/etc/pam.d/login', [ "'/^@include/s/common-auth$/common-auth-sonic/'" ])
        else:
            self.modify_single_file('/etc/pam.d/sshd',  [ "'/^@include/s/common-auth-sonic$/common-auth/'" ])
            self.modify_single_file('/etc/pam.d/login', [ "'/^@include/s/common-auth-sonic$/common-auth/'" ])

        # Add tacplus in nsswitch.conf if TACACS+ enable
        if 'tacacs+' in auth['login']:
            if os.path.isfile(NSS_CONF):
                self.modify_single_file(NSS_CONF, [ "'/tacplus/b'", "'/^passwd/s/compat/tacplus &/'"])
        else:
            if os.path.isfile(NSS_CONF):
                self.modify_single_file(NSS_CONF, [ "'/^passwd/s/tacplus //'" ])

        # Set tacacs+ server in nss-tacplus conf
        template_file = os.path.abspath(NSS_TACPLUS_CONF_TEMPLATE)
        template = env.get_template(template_file)
        nss_tacplus_conf = template.render(debug=self.debug, servers=servers_conf)
        with open(NSS_TACPLUS_CONF, 'w') as f:
            f.write(nss_tacplus_conf)

#Management interface and Management VRF config handling

MGMT_INTF_ADMIN_STATUS_DEFAULT = "up"
CFG_MGMT_PORT_TABLE = "MGMT_PORT"
CFG_MGMT_INTF_TABLE = "MGMT_INTERFACE"
APP_MGMT_PORT_TABLE = "MGMT_PORT_TABLE"
APP_MGMT_INTF_TABLE = "MGMT_INTF_TABLE"
CFG_MGMT_VRF      = "MGMT_VRF_CONFIG"
CFG_MGMT_VRF_KEY  = "vrf_global"
MGMT_VRF_TABLE_ID = 5000

class MgmtVrfCfg:
    def __init__(self, config_db):
        syslog.syslog(syslog.LOG_INFO, 'Initializing MGMT VRF handler')
        self.config_db = config_db
        self.mgmt_vrf_table_created = False

    def create_mgmt_vrf_table(self):
        if self.mgmt_vrf_table_created == False:
            syslog.syslog(syslog.LOG_INFO, "Create MGMT VRF table:")
            cmd = 'ip link add name mgmt type vrf table {}'.format(MGMT_VRF_TABLE_ID)
            if run_command(cmd) == True:
                self.mgmt_vrf_table_created = True

    def delete_mgmt_vrf_table(self):
        if self.mgmt_vrf_table_created == True:
            syslog.syslog(syslog.LOG_INFO, "Delete MGMT VRF table:")
            cmd = 'ip link delete mgmt'
            if run_command(cmd) == True:
                self.mgmt_vrf_table_created = False

    def configure_mgmt_vrf(self):
        syslog.syslog(syslog.LOG_INFO, "Configure MGMT VRF:")

        self.create_mgmt_vrf_table()

        cmd = 'ip link set dev mgmt up'
        if run_command(cmd) == False:
            return

        syslog.syslog(syslog.LOG_INFO, "Add lo intf:")
        cmd = 'ip link add lo-m type dummy'
        if run_command(cmd) == False:
            return

        cmd = 'ip addr add 127.0.0.1/8 dev lo-m'
        if run_command(cmd) == False:
            return

        cmd = 'ip link set lo-m up'
        if run_command(cmd) == False:
            return

        cmd = 'ip link set dev lo-m master mgmt'
        if run_command(cmd) == False:
            return

        self.bind_mgmt_intf()

    def bind_mgmt_intf(self):
        syslog.syslog(syslog.LOG_INFO, "Handle MGMT intf:")
        keys = self.config_db.get_keys(CFG_MGMT_INTF_TABLE)
        syslog.syslog(syslog.LOG_INFO, "MGMT interfaces keys: {}".format(str(keys)))

        mgmt_intf_bound = False
        for it in keys:
            if type(it) is unicode:
                mgmt_intf_name = it

                cmd = 'ip link set dev {} master mgmt'.format(mgmt_intf_name)
                if run_command(cmd) == False:
                    return

                cmd = 'sysctl -w net.ipv4.tcp_l3mdev_accept=1'
                if run_command(cmd) == False:
                    return

                mgmt_intf_bound = True
                break
        if not mgmt_intf_bound:
            syslog.syslog(syslog.LOG_ERR, "MGMT VRF: MGMT interface not bound")
        else:
            for it in keys:
                if type(it) is unicode:
                    key = it
                else:
                    key = it[0] + "|" + it[1]

                entry = self.config_db.get_entry(CFG_MGMT_INTF_TABLE, key)
                if 'gwaddr' in entry:
                    mgmt_intf_gwaddr = entry['gwaddr']
                    cmd = 'ip route add table {} 0.0.0.0/0 via {}'.format(MGMT_VRF_TABLE_ID, mgmt_intf_gwaddr)
                    if run_command(cmd) == False:
                        return

    def unconfigure_mgmt_vrf(self):
        syslog.syslog(syslog.LOG_INFO, "Unconfigure MGMT VRF:")

        cmd = 'ip link delete lo-m'
        if run_command(cmd) == True:
            self.delete_mgmt_vrf_table()

        return

    def handle_mgmt_intf_gwaddr_cfg(self, op, ifname, gwaddr):
        syslog.syslog(syslog.LOG_INFO, "Received MGMT Intf gwaddr config, op: {}, ifname: {}, gwaddr: {}".format(op, ifname, gwaddr))
        keys = self.config_db.get_keys(CFG_MGMT_VRF)
        if keys:
            cmd = 'ip route del table {} 0.0.0.0/0'.format(MGMT_VRF_TABLE_ID)
            run_command(cmd)
            
            if op == "ADD":
                cmd = 'ip route add table {} 0.0.0.0/0 via {}'.format(MGMT_VRF_TABLE_ID, gwaddr)
                run_command(cmd)
            return True

    def handle_mgmt_intf_creation(self, mgmt_intf_key):
        syslog.syslog(syslog.LOG_INFO, "Received MGMT Intf creation, key: {}".format(mgmt_intf_key))
        keys = self.config_db.get_keys(CFG_MGMT_VRF)
        if keys:
            syslog.syslog(syslog.LOG_INFO, "MGMT VRF created")
            self.bind_mgmt_intf()

    def handle_mgmt_vrf_cfg(self, key, data):
        syslog.syslog(syslog.LOG_INFO, "Received MGMT VRF config, key: {}, data: {}".format(key, data))
        try:
            if data:
                if data['mgmtVrfEnabled'] == 'true':
                    self.configure_mgmt_vrf()
                else:
                    self.unconfigure_mgmt_vrf()
            else:
                self.unconfigure_mgmt_vrf()
        except:
            syslog.syslog(syslog.LOG_ERR, "{} MGMT VRF Configuration failed.".format(key))

    def mgmt_vrf_table_get(self):
        vrf_table = 'default'
        entry = self.config_db.get_entry(CFG_MGMT_VRF, CFG_MGMT_VRF_KEY)
        if entry:
            if (('mgmtVrfEnabled' in entry) and (entry['mgmtVrfEnabled'] == 'true')):
                vrf_table = '5000'

        return vrf_table




def run_command(cmd):
    syslog.syslog(syslog.LOG_INFO, "Config cmd - {}".format(cmd))
    try:
        subprocess.check_call(cmd, shell=True)
    except subprocess.CalledProcessError as err:
        syslog.syslog(syslog.LOG_ERR, "{} - failed: return code - {}, output:\n{}"
                .format(err.cmd, err.returncode, err.output))
        return False

    return True

def cfg_attr_set (cmd, attr = None, value = None, appIntf = None):

    rc = run_command(cmd)
    if appIntf != None and rc == True:
        appIntf[attr] = value

    return rc

def is_attr_cfg_required (attr, cfg_data, app_data, cfgAllAtrr = True):
    rc = False

    if ((cfgAllAtrr == True) or (attr not in app_data) or (cfg_data[attr] != app_data[attr])):
        rc = True

    return rc


class MgmtIntfCfg:
    def __init__(self, cfg_db, mgmt_vrf_cfg):
        self.app_db = ConfigDBConnector()
        self.app_db.db_connect('APPL_DB', wait_for_init=False, retry_on=True)
        self.config_db = cfg_db
        self.mgmt_vrf_cfg = mgmt_vrf_cfg
        syslog.syslog(syslog.LOG_INFO, 'AppDB connect success')

        self.mgmt_intf_handle_default_cfg("eth0")

    def mgmt_intf_handle_default_cfg (self, ifname):
        mgmt_intf = self.config_db.get_entry(CFG_MGMT_PORT_TABLE, ifname)
        if mgmt_intf == {}:
            mgmt_intf['mtu'] = "1500"
            mgmt_intf['speed'] = "1000"
            mgmt_intf['admin_status'] = MGMT_INTF_ADMIN_STATUS_DEFAULT
            mgmt_intf['autoneg'] = "true"
            mgmt_intf['description'] = "Management0"
            syslog.syslog(syslog.LOG_INFO, "Default config populated for {}".format(ifname))
            self.config_db.set_entry(CFG_MGMT_PORT_TABLE, ifname, mgmt_intf)

        self.handle_mgmt_port_cfg(ifname, mgmt_intf)

        mgmt_intf = self.config_db.get_entry(CFG_MGMT_INTF_TABLE, ifname)
        if mgmt_intf == {}:
            mgmt_intf['ipv4_dhcp_client'] = "true"
            mgmt_intf['ipv6_dhcp_client'] = "true"
            self.config_db.set_entry(CFG_MGMT_INTF_TABLE, ifname, mgmt_intf)
            self.app_db.set_entry(APP_MGMT_INTF_TABLE, ifname, mgmt_intf)

    def mgmt_intf_mtu_set (self, ifname, mtu, appIntf):
        cmd = 'ifconfig {} mtu {}'.format(ifname, mtu)
        cfg_attr_set(cmd, 'mtu', mtu, appIntf)

    def mgmt_intf_admin_status_set (self, ifname, admin_status, appIntf):
        cmd = 'ifconfig {} {}'.format(ifname, admin_status)
        cfg_attr_set(cmd, 'admin_status', admin_status, appIntf)

    def mgmt_intf_description_set (self, ifname, description, appIntf):
        appIntf['description'] = description

    def mgmt_intf_speed_set (self, ifname, speed, autoneg, appIntf):
        duplex = "full"
        cmd = 'ethtool -s {} speed {} duplex {} autoneg {}; ifup {}'.format(ifname, speed, duplex, autoneg, ifname)
        cfg_attr_set(cmd, 'speed', speed, appIntf)

    def mgmt_intf_autoneg_set (self, ifname, autoneg, appIntf):
        an = "on"
        if autoneg == "true":
            an = "on"
        elif autoneg == "false":
            an = "off"

        cmd = "ethtool -s {} autoneg {}".format(ifname, an)
        cfg_attr_set(cmd, 'autoneg', autoneg, appIntf)

    def mgmt_intf_gwaddr_set(self, ifname, ip_prefix, gwaddr, op):
        vrf_table = self.mgmt_vrf_cfg.mgmt_vrf_table_get()
        ip_conf = netaddr.IPNetwork(ip_prefix)
        ver = "-4"
        if ip_conf.version == 6:
            ver = "-6"

        cmd = "ip {} route {} default via {} dev {} table {}".format(ver, op.lower(), gwaddr, ifname, vrf_table)
        cfg_attr_set(cmd)


    def mgmt_intf_dhclient_set (self, ifname, attr, enable):
        version  = ""
        file_ext = ""
        cmd_opt  = ""

        if attr == "ipv6_dhcp_client":
            version = "-6"
            file_ext = "6"
            cmd_opt = "-D LL"

        if enable == True:
            path = "/var/run/dhclient{}.{}.pid".format(file_ext, ifname)
            if os.path.exists(path):
                cmd = "[ -f /var/run/dhclient{}.{}.pid ] && kill `cat /var/run/dhclient{}.{}.pid` && rm -f /var/run/dhclient{}.{}.pid".format(file_ext, ifname, file_ext, ifname, file_ext, ifname)
                run_command(cmd)

        if enable == True:
            cmd = "/sbin/dhclient {} -pf /run/dhclient{}.{}.pid -lf /var/lib/dhcp/dhclient{}.{}.leases {} -nw {} ".format(version, file_ext, ifname, file_ext, ifname, ifname, cmd_opt)
        else:
            cmd = "/sbin/dhclient {} -r {} && [ -f /var/run/dhclient{}.{}.pid ] && kill `cat /var/run/dhclient{}.{}.pid` && rm -f /var/run/dhclient{}.{}.pid".format(version, ifname, file_ext, ifname, file_ext, ifname, file_ext, ifname)

        run_command(cmd)

    def mgmt_intf_ip_prefix_set (self, ifname, ip_prefix, op):
        ver = "-4"
        mgmt_conf = netaddr.IPNetwork(ip_prefix)
        if mgmt_conf.version == 6:
            ver = "-6"

        cmd = "ip {} addr {} {} dev {}".format(ver, op.lower(), ip_prefix, ifname)
        cfg_attr_set(cmd)

        cmd = "ip {} rule {} from {} table default".format(ver, op.lower(), str(mgmt_conf.ip))
        cfg_attr_set(cmd)

    def mgmt_intf_forced_mgmt_routes_set (self, ifname, ip_prefix, forced_routes, op, app_forced_routes = []):
        vrf_table = self.mgmt_vrf_cfg.mgmt_vrf_table_get()
        if op == "UPDATE":
            routes_add = []
            routes_del = []
            for cfg_route in forced_routes:
                if cfg_route not in app_forced_routes:
                    routes_add.append(cfg_route)

            for cfg_route in app_forced_routes:
                if cfg_route not in forced_routes:
                    routes_del.append(cfg_route)

            self.mgmt_intf_forced_mgmt_routes_set(ifname, ip_prefix, routes_del, "DEL")
            self.mgmt_intf_forced_mgmt_routes_set(ifname, ip_prefix, routes_add, "ADD")
            return routes_add
        else:
            for route in forced_routes:
                cmd = "ip rule {} to {} table {}".format(op.lower(), route, vrf_table)
                cfg_attr_set(cmd)
                return forced_routes


    def handle_mgmt_port_cfg(self, key, data):
        mgmt_intf =  self.app_db.get_entry(APP_MGMT_PORT_TABLE, key)
        cfgAllAtrr = False
        if mgmt_intf == {}:
            cfgAllAttr = True

        attr_func_map = {
                'mtu'         : self.mgmt_intf_mtu_set,
                'description' : self.mgmt_intf_description_set,
                'admin_status': self.mgmt_intf_admin_status_set,
                'autoneg'     : self.mgmt_intf_autoneg_set,
                'speed'       : self.mgmt_intf_speed_set,
                }
        for attr in data:
            if (is_attr_cfg_required(attr, data, mgmt_intf, cfgAllAtrr) == True):
                if attr == 'speed':
                    autoneg = "on"
                    if 'autoneg' in data:
                        if data['autoneg'] == "false":
                            autoneg = "off"
                    attr_func_map[attr](key, data[attr], autoneg, mgmt_intf)
                else:
                    attr_func_map[attr](key, data[attr], mgmt_intf)

        self.app_db.set_entry(APP_MGMT_PORT_TABLE, key, mgmt_intf)


    def handle_mgmt_intf_cfg(self, key, data):
        cur_appdb_key = key.replace('|', ':')
        intf_keys = key.split("|")
        db_key = key
        if (len(intf_keys) > 1):
            db_key = tuple(intf_keys)

        cfgdb_entry = self.config_db.get_entry(CFG_MGMT_INTF_TABLE, key)
        appdb_entry = self.app_db.get_entry(APP_MGMT_INTF_TABLE, cur_appdb_key)
        cfg_keys = self.config_db.get_keys(CFG_MGMT_INTF_TABLE)
        app_keys = self.app_db.get_keys(APP_MGMT_INTF_TABLE)
        op = "DELETE"
        if ((db_key in cfg_keys) or (key in cfg_keys)):
            if ((db_key in app_keys) or (cur_appdb_key in app_keys)):
                op = "UPDATE"
            else:
                op = "CREATE"

        if (len(intf_keys) < 2):
            if op == "DELETE":
                cfgdb_entry['ipv4_dhcp_client'] = "true"
                cfgdb_entry['ipv6_dhcp_client'] = "true"
                self.config_db.set_entry(CFG_MGMT_INTF_TABLE, key, cfgdb_entry)

            for attr in cfgdb_entry:
                if is_attr_cfg_required(attr, cfgdb_entry, appdb_entry, False):
                    self.mgmt_intf_dhclient_set(intf_keys[0], attr, cfgdb_entry[attr] == "true")
                    appdb_entry[attr] = cfgdb_entry[attr]
            self.app_db.set_entry(APP_MGMT_INTF_TABLE, cur_appdb_key, appdb_entry)

        else:
            if op == "CREATE":
                self.mgmt_intf_ip_prefix_set(intf_keys[0], intf_keys[1], "ADD")
                if ('gwaddr' in data):
                    self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], data['gwaddr'], "ADD")
                    appdb_entry['gwaddr'] = data['gwaddr']

                if ('forced_mgmt_routes' in data):
                    forced_routes = data['forced_mgmt_routes']
                    self.mgmt_intf_forced_mgmt_routes_set(intf_keys[0], intf_keys[1], forced_routes, "ADD")
                    appdb_entry['forced_mgmt_routes'] = data['forced_mgmt_routes']

                if appdb_entry == {}:
                    appdb_entry["NULL"] = "NULL"

                self.app_db.set_entry(APP_MGMT_INTF_TABLE, cur_appdb_key, appdb_entry)
            elif op == "UPDATE":
                '''
                Case 1: gwaddr attribute delete case, gwaddr present in appdb entry
                        and not in config db entry
                Case 2: gwaddr attribute add case, gwaddr is present in config db
                        entry but not in appdb entry
                case 3: gwaddr attribute modify case, gwaddr present in both config
                        and app db entry but they are different
                '''
                if ('gwaddr' not in cfgdb_entry):
                    if ('gwaddr' in appdb_entry):
                        self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], appdb_entry['gwaddr'],"DEL")
                        del appdb_entry['gwaddr']
                else:
                    if ('gwaddr' not in appdb_entry):
                        self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], cfgdb_entry['gwaddr'], "ADD")
                    elif (cfgdb_entry['gwaddr'] != appdb_entry['gwaddr']):
                        self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], appdb_entry['gwaddr'],"DEL")
                        self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], cfgdb_entry['gwaddr'], "ADD")

                    appdb_entry['gwaddr'] = cfgdb_entry['gwaddr']

                '''
                Handle forced routes config UPDATE operation
                '''
                cfg_forced_routes = []
                app_forced_routes = []
                if ('forced_mgmt_routes' in cfgdb_entry):
                    cfg_forced_routes = cfgdb_entry['forced_mgmt_routes']
                if ('forced_mgmt_routes' in appdb_entry):
                    app_forced_routes = appdb_entry['forced_mgmt_routes']

                '''
                check is forced_mgmt_routes present in config db or app db entry
                handle update case.
                '''
                if (len(cfg_forced_routes) > 0 or len(app_forced_routes) > 0):
                    cfg_forced_routes = self.mgmt_intf_forced_mgmt_routes_set(intf_keys[0], intf_keys[1],
                                                    cfg_forced_routes, op, app_forced_routes)
                
                    if len(cfg_forced_routes) == 0:
                        del appdb_entry['forced_mgmt_routes']
                    else:
                        appdb_entry['forced_mgmt_routes'] = cfgdb_entry['forced_mgmt_routes']

                if appdb_entry == {}:
                    appdb_entry["NULL"] = "NULL"

                self.app_db.set_entry(APP_MGMT_INTF_TABLE, cur_appdb_key, appdb_entry)

            else:
                self.mgmt_intf_ip_prefix_set(intf_keys[0], intf_keys[1], "DEL")
                if ('gwaddr' in appdb_entry):
                    self.mgmt_intf_gwaddr_set(intf_keys[0], intf_keys[1], appdb_entry['gwaddr'], "DEL")

                if ('forced_mgmt_routes' in appdb_entry):
                    forced_routes = appdb_entry['forced_mgmt_routes']
                    self.mgmt_intf_forced_mgmt_routes_set(intf_keys[0], intf_keys[1], forced_routes, "DEL")

                self.app_db.delete_entry(APP_MGMT_INTF_TABLE, cur_appdb_key)



class HostConfigDaemon:
    def __init__(self):
        self.config_db = ConfigDBConnector()
        self.config_db.connect(wait_for_init=True, retry_on=True)
        syslog.syslog(syslog.LOG_INFO, 'ConfigDB connect success')
        aaa = self.config_db.get_table('AAA')
        tacacs_global = self.config_db.get_table('TACPLUS')
        tacacs_server = self.config_db.get_table('TACPLUS_SERVER')
        self.aaacfg = AaaCfg()
        self.aaacfg.load(aaa, tacacs_global, tacacs_server)
        self.mgmtvrfcfg = MgmtVrfCfg(self.config_db)
        self.mgmtcfg = MgmtIntfCfg(self.config_db, self.mgmtvrfcfg)
        lpbk_table = self.config_db.get_table('LOOPBACK_INTERFACE')
        self.iptables = Iptables()
        self.iptables.load(lpbk_table)

    def aaa_handler(self, key, data):
        self.aaacfg.aaa_update(key, data)

    def tacacs_server_handler(self, key, data):
        self.aaacfg.tacacs_server_update(key, data)
        log_data = copy.deepcopy(data)
        if log_data.has_key('passkey'):
            log_data['passkey'] = obfuscate(log_data['passkey'])
        syslog.syslog(syslog.LOG_INFO, 'value of {} changed to {}'.format(key, log_data))

    def tacacs_global_handler(self, key, data):
        self.aaacfg.tacacs_global_update(key, data)
        log_data = copy.deepcopy(data)
        if log_data.has_key('passkey'):
            log_data['passkey'] = obfuscate(log_data['passkey'])
        syslog.syslog(syslog.LOG_INFO, 'value of {} changed to {}'.format(key, log_data))

    def lpbk_handler(self, key, data):
        key = ConfigDBConnector.deserialize_key(key)
        #Check if delete operation by fetch existing keys
        keys = self.config_db.get_keys('LOOPBACK_INTERFACE')
        if key in keys:
            add = True
        else:
            add = False

        self.iptables.iptables_handler(key, data, add)

    def mgmt_vrf_handler(self, key, data):
        self.mgmtvrfcfg.handle_mgmt_vrf_cfg(key, data)

    def mgmt_port_handler(self, key, data):
        self.mgmtcfg.handle_mgmt_port_cfg(key, data)

    def mgmt_intf_handler(self, key, data):
        self.mgmtcfg.handle_mgmt_intf_cfg(key, data)

    def feature_status_handler(self, key, data):
        status_data = self.config_db.get_table('FEATURE')
        for key in status_data.keys():
            if not key:
                syslog.syslog(syslog.LOG_WARNING, "FEATURE key is missing")
                return
        status = status_data[key]['status']
        if not status:
            syslog.syslog(syslog.LOG_WARNING, "status is missing for {}".format(key))
            return
        if status == "enabled":
            start_cmds=[]
            start_cmds.append("sudo systemctl enable {}".format(key))
            start_cmds.append("sudo systemctl start {}".format(key))
            for cmd in start_cmds:
                syslog.syslog(syslog.LOG_INFO, "Running cmd - {}".format(cmd))
                try:
                    subprocess.check_call(cmd, shell=True)
                except subprocess.CalledProcessError as err:
                    syslog.syslog(syslog.LOG_ERR, "{} - failed: return code - {}, output:\n{}"
                              .format(err.cmd, err.returncode, err.output))
                    return
            syslog.syslog(syslog.LOG_INFO, "Feature '{}' is enabled and started".format(key))
        elif status == "disabled":
            stop_cmds=[]
            stop_cmds.append("sudo systemctl stop {}".format(key))
            stop_cmds.append("sudo systemctl disable {}".format(key))
            for cmd in stop_cmds:
                syslog.syslog(syslog.LOG_INFO, "Running cmd - {}".format(cmd))
                try:
                    subprocess.check_call(cmd, shell=True)
                except subprocess.CalledProcessError as err:
                    syslog.syslog(syslog.LOG_ERR, "{} - failed: return code - {}, output:\n{}"
                              .format(err.cmd, err.returncode, err.output))
                    return
            syslog.syslog(syslog.LOG_INFO, "Feature '{}' is stopped and disabled".format(key))
        else:
            syslog.syslog(syslog.LOG_ERR, "Unexpected status value '{}' for '{}'".format(status, key))

    def start(self):
        self.config_db.subscribe('AAA', lambda table, key, data: self.aaa_handler(key, data))
        self.config_db.subscribe('TACPLUS_SERVER', lambda table, key, data: self.tacacs_server_handler(key, data))
        self.config_db.subscribe('TACPLUS', lambda table, key, data: self.tacacs_global_handler(key, data))
        self.config_db.subscribe('LOOPBACK_INTERFACE', lambda table, key, data: self.lpbk_handler(key, data))
        self.config_db.subscribe('FEATURE', lambda table, key, data: self.feature_status_handler(key, data))
        self.config_db.subscribe(CFG_MGMT_VRF, lambda table, key, data: self.mgmt_vrf_handler(key, data))
        self.config_db.subscribe(CFG_MGMT_PORT_TABLE, lambda table, key, data: self.mgmt_port_handler(key, data))
        self.config_db.subscribe(CFG_MGMT_INTF_TABLE, lambda table, key, data: self.mgmt_intf_handler(key, data))
        self.config_db.listen()


def main():
    daemon = HostConfigDaemon()
    daemon.start()


if __name__ == "__main__":
    main()
