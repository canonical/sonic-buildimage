void
dport_from_port(int phy_port, int *dport) {
	int i, phy_size;
	int phy_map[] = {102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133, 1,  2,  3,  4,  5,  6,  7,  8, 9, 10, 11, 12, 13, 14, 15, 16};

	phy_size = sizeof(phy_map) / sizeof(phy_map[0]);

	for(i=0;i<phy_size;i++){
		if(phy_map[i]== phy_port){
			*dport = i;
			return;
		}
	}
	*dport = -1;
}

void
link_callback(int unit, bcm_port_t port, bcm_port_info_t *info) {
	int dport;
	int led_ix = 0;
	unsigned int portdata = 0;
	int byte = 0;

	dport_from_port(port, &dport);

	if (dport > 31 && dport < 96) {
		led_ix = 1;
		dport -=  32;
	}else if (dport > 31) {
		dport -= 64;
	}

	if(led_ix == 0){
		byte = 0x20680 + 4 * dport;
	}else{
		byte = 0x21680 + 4 * dport;
	}

	diag_pcie_read(0,byte,&portdata,0);

	if (info->linkstatus == BCM_PORT_LINK_STATUS_UP) {
		int speed = 0;
		portdata |= 0x02;

		/* get port speed */
		bcm_port_speed_get(unit, port, &speed);

		/* Port speed */
		if(speed == 100000){
			/* Bit5Bit4Bit3 = 101-100G */
			portdata = (portdata & ~0x08) | 0x14;
		}else if(speed == 40000){
			/* Bit5Bit4Bit3 = 100-40G */
			portdata = (portdata & ~0x0c) | 0x10;
		}else if(speed == 50000){
			/* Bit5Bit4Bit3 = 010-50G */
			portdata = (portdata & ~0x14) | 0x08;
		}else if(speed == 25000){
			/* Bit5Bit4Bit3 = 001-25G */
			portdata = (portdata & ~0x18) | 0x04;
		}else if(speed == 10000){
			/* Bit5Bit4Bit3 = 000-10G */
			portdata = portdata & ~0x1c;
		}
	} else {
		portdata &= ~0x02;
	}

	diag_pcie_write(0,byte,portdata,0);

}

int
link_monitor(int unit, int state)
{
	bcm_port_config_t config;
	if (state) {
		BCM_IF_ERROR_RETURN(bcm_linkscan_register(unit, link_callback));
		BCM_IF_ERROR_RETURN(bcm_port_config_get(unit, &config));
		BCM_IF_ERROR_RETURN(bcm_link_change(unit, config.port));
	} else {
		BCM_IF_ERROR_RETURN(bcm_linkscan_unregister(unit, link_callback));
	}
	return BCM_E_NONE;
}

link_monitor(0,1);
