parameters:
- name: platform
  type: string
  values:
  - barefoot
  - broadcom
  - centec
  - centec-arm64
  - generic
  - innovium
  - marvell-armhf
  - mellanox
  - nephos
  - vs

- name: platform_arch
  type: string
  values:
  - amd64
  - armhf
  - arm64
  default: amd64

- name: platform_short
  type: string
  values:
  - barefoot
  - brcm
  - centec
  - centec-arm64
  - generic
  - innovium
  - marvell-armhf
  - mlnx
  - nephos
  - vs
  - ''
  default: ''

- name: cache_mode
  type: string
  values:
  - wcache
  - rcache
  - cache
  - none
  default: none

- name: pool
  type: string
  values:
  - sonicbld
  - sonicbld_8c
  default: sonicbld

- name: dbg_image
  type: boolean
  default: false

- name: swi_image
  type: boolean
  default: false

- name: raw_image
  type: boolean
  default: false

- name: sync_rpc_image
  type: boolean
  default: false

- name: timeout
  type: number
  default: 600

# for reproducible build
- name: reproducible_options
  type: string
  default: ''

- name: 'postSteps'
  type: stepList
  default: []
jobs:
- job:
  pool: ${{ parameters.pool }}
  displayName: ${{ parameters.platform }}
  timeoutInMinutes: ${{ parameters.timeout }}
  steps:
  - script: |
      if sudo [ -f /var/run/march/docker.pid ] ; then
        pid=`sudo cat /var/run/march/docker.pid` ; sudo kill $pid
      fi
      sudo rm -f /var/run/march/docker.pid
      sudo rm -rf /data/march/docker

      # clean native docker build
      if sudo [ -f dockerfs/var/run/docker.pid ] ; then
        pid=`sudo cat dockerfs/var/run/docker.pid` ; sudo kill $pid
      fi

      # clean workspace
      sudo rm -rf $(ls -A1)
    displayName: "Clean Workspace"
  - checkout: self
    submodules: recursive
    displayName: 'Checkout code'
  - script: |
      set -e
      sudo modprobe overlay
      sudo apt-get install -y acl
      export DOCKER_DATA_ROOT_FOR_MULTIARCH=/data/march/docker
      CACHE_OPTIONS="SONIC_DPKG_CACHE_METHOD=${{ parameters.cache_mode }} SONIC_DPKG_CACHE_SOURCE=/nfs/dpkg_cache/${{ parameters.platform }}"
      MAKE_OPTIONS="USERNAME=admin SONIC_BUILD_JOBS=$(nproc) $CACHE_OPTIONS ${{ parameters.reproducible_options }}"
      ENABLE_DOCKER_BASE_PULL=y make configure PLATFORM=${{ parameters.platform }} PLATFORM_ARCH=${{ parameters.platform_arch }}

      if [ ${{ parameters.platform }} == vs ]; then
        if [ ${{ parameters.dbg_image }} == true ]; then
          make $MAKE_OPTIONS INSTALL_DEBUG_TOOLS=y target/sonic-vs.img.gz && \
            mv target/sonic-vs.img.gz target/sonic-vs-dbg.img.gz
        fi

        make $MAKE_OPTIONS target/docker-sonic-vs.gz target/sonic-vs.img.gz target/docker-ptf.gz
      else
        if [ ${{ parameters.dbg_image }} == true ]; then
          make  $MAKE_OPTIONS INSTALL_DEBUG_TOOLS=y target/sonic-${{ parameters.platform }}.bin && \
            mv target/sonic-${{ parameters.platform }}.bin target/sonic-${{ parameters.platform }}-dbg.bin
        fi
        if [ ${{ parameters.swi_image }} == true ]; then
          make $MAKE_OPTIONS ENABLE_IMAGE_SIGNATURE=y target/sonic-aboot-${{ parameters.platform }}.swi
        fi
        if [ ${{ parameters.raw_image }} == true ]; then
          make $MAKE_OPTIONS target/sonic-${{ parameters.platform }}.raw
        fi
        if [ ${{ parameters.sync_rpc_image }} == true ]; then
          make $MAKE_OPTIONS ENABLE_SYNCD_RPC=y target/docker-syncd-${{ parameters.platform_short }}-rpc.gz
        fi

        make $MAKE_OPTIONS target/sonic-${{ parameters.platform }}.bin
      fi
    displayName: 'Build sonic image'
  - ${{ parameters.postSteps }}
  - publish: $(System.DefaultWorkingDirectory)/
    artifact: sonic-buildimage.${{ parameters.platform }}
    displayName: "Archive sonic image"
