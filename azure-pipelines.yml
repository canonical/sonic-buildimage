# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
      - 202012
  paths:
    exclude:
      - .github

pr:
  branches:
    include:
      - master
      - 202012
      - bullseye
  paths:
    exclude:
      - .github

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  pool: sonicbld
  variables:
    CACHE_MODE: rcache
    ${{ if eq(variables['Build.SourceBranchName'], '202012') }}:
      VERSION_CONTROL_OPTIONS: 'SONIC_VERSION_CONTROL_COMPONENTS=deb,py2,py3,web,git,docker'
  jobs:
  - template: .azure-pipelines/azure-pipelines-build.yml
    parameters:
      buildOptions: 'USERNAME=admin SONIC_BUILD_JOBS=$(nproc) ${{ variables.VERSION_CONTROL_OPTIONS }}'
      jobGroups:
      - name: vs
      - name: broadcom
        variables:
          swi_image: yes
      - name: mellanox
  - job: DockerMgmt
    displayName: 'Build sonic-mgmt docker'
    timeoutInMinutes: 360
    pool: sonicbld
    steps:
    - checkout: self
      clean: true
      submodules: recursive
    - script: |
        set -e
        if [[ "$(Build.Reason)" == "PullRequest" ]];then
          diff_string=$(git diff origin/$(System.PullRequest.TargetBranch) dockers/docker-sonic-mgmt/)
        else
          diff_string=$(git diff origin/$(Build.SourceBranchName) dockers/docker-sonic-mgmt/)
        fi
        echo "diff: "$diff_string
        if [[ "$diff_string" == "" ]];then
          # Output=true can insure cross stage usage. But the same stage can't use it
          echo "##vso[task.setvariable variable=SKIP_MGMT;isOutput=true]1"
          echo "##vso[task.setvariable variable=SKIP_MGMT]1"
        else
          echo "##vso[task.setvariable variable=SKIP_MGMT;isOutput=true]0"
          echo "##vso[task.setvariable variable=SKIP_MGMT]0"
          make configure PLATFORM=generic
          make target/docker-sonic-mgmt.gz
          cp target -r $(Build.ArtifactStagingDirectory)/target
        fi
      name: dockerMgmt
    - publish: $(Build.ArtifactStagingDirectory)
      condition: eq(variables['SKIP_MGMT'], 0)
      artifact: 'docker-sonic-mgmt.pull'
      displayName: 'Archive docker image sonic-mgmt'


- stage: Test
  dependsOn: Build
  variables:
  - name: inventory
    value: veos_vtb
  - name: testbed_file
    value: vtestbed.csv
  - name: SKIP_MGMT
    value: $[ stagedependencies.Build.DockerMgmt.outputs['dockerMgmt.SKIP_MGMT'] ]
  jobs:
  - job:
    pool: sonictest
    displayName: "vstest"
    timeoutInMinutes: 60
    steps:
    - checkout: self
      clean: true
      submodules: recursive
      displayName: 'Checkout code'
    - script: |
        if [[ "$(Build.Reason)" == "PullRequest" ]];then
          sourceBranch=$(System.PullRequest.TargetBranch)
        else
          sourceBranch=$(Build.SourceBranchName)
        fi
        echo "##vso[task.setvariable variable=sourceBranch]$sourceBranch"
    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 9
        artifact: sonic-swss-common.amd64.ubuntu20_04
        runVersion: 'latestFromBranch'
        runBranch: refs/heads/$(sourceBranch)
        path: $(Build.SourcesDirectory)/sonic-swss-common.amd64.ubuntu20_04
      displayName: "Download sonic swss common deb packages"

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: sonic-buildimage.vs
        path: $(Build.SourcesDirectory)/sonic-buildimage.vs
      displayName: "Download sonic-buildimage.vs artifact"

    - task: DownloadPipelineArtifact@2
      condition: eq(variables['SKIP_MGMT'], 0)
      inputs:
        artifact: docker-sonic-mgmt.pull
        path: $(Build.SourcesDirectory)/docker-sonic-mgmt.pull
      displayName: 'Download sonic-mgmt image'

    - script: |
        set -e
        docker rmi sonic-mgmt || true
        docker load -i docker-sonic-mgmt.pull/target/docker-sonic-mgmt.gz
        /data/sonic-mgmt/setup-container.sh -n sonic-mgmt -d /data -f yes
      displayName: 'setup sonic-mgmt container'
      condition: eq(variables['SKIP_MGMT'], 0)

    - script: |
        set -x
        cd $(Build.SourcesDirectory)/sonic-swss-common.amd64.ubuntu20_04
        sudo dpkg -i --force-confask,confnew libswsscommon_1.0.0_amd64.deb
        sudo dpkg -i python3-swsscommon_1.0.0_amd64.deb
        cd $(Build.SourcesDirectory)/docker-sonic-mgmt.pull
        sudo docker load -i target/docker-sonic-vs.gz
        docker tag docker-sonic-vs:latest docker-sonic-vs:$(Build.BuildNumber)
        username=$(id -un)

        trap "docker ps; docker images; ip netns list; \
              docker rmi docker-sonic-vs:$(Build.BuildNumber); \
              ip netns list | grep -E [-]srv[0-9]+ | awk '{print $1}' | xargs -I {} sudo ip netns delete {}; \
              sudo chown -R ${username}.${username} .; \
              sudo chown -R ${username}.${username} $(System.DefaultWorkingDirectory)" EXIT
        pushd platform/vs/tests
        sudo py.test -v --junitxml=tr.xml --imgname=docker-sonic-vs:$(Build.BuildNumber)
      displayName: "Run vs tests"

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/tr.xml'
        testRunTitle: vstest

  - job:
    pool: sonictest
    displayName: "kvmtest-t0"
    timeoutInMinutes: 360

    steps:
    - template: .azure-pipelines/run-test-template.yml
      parameters:
        dut: vlab-01
        tbname: vms-kvm-t0
        ptf_name: ptf_vms6-1
        tbtype: t0

  - job:
    pool: sonictest-t1-lag
    displayName: "kvmtest-t1-lag"
    timeoutInMinutes: 240

    steps:
    - template: .azure-pipelines/run-test-template.yml
      parameters:
        dut: vlab-03
        tbname: vms-kvm-t1-lag
        ptf_name: ptf_vms6-2
        tbtype: t1-lag
