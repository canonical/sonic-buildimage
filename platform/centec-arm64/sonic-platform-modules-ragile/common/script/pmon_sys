#!/usr/bin/python
# -*- coding: UTF-8 -*-

#   * onboard interval check
#   * FAN trays
#   * PSU
#   * temp
import os
import time
import datetime
import platform
import syslog

from rjutil.baseutil import get_machine_info
from rjutil.baseutil import get_platform_info

x = get_platform_info(get_machine_info())
if x != None:
 filepath = "/usr/share/sonic/device/" + x 
import sys
sys.path.append(filepath)

from monitor import status

class platformSyslog():
    def __init__(self):
        self.preFanStatus = []
        self.prePsuStatus = []
    
    def sortCallback(self, element):
        return element['id']

    def updateFanStatus(self):
        curFanStatus = []
        status.checkFan(curFanStatus)
        curFanStatus.sort(key = self.sortCallback)
        if cmp(self.preFanStatus, curFanStatus) != 0:
            if len(self.preFanStatus) == 0:
                # first time
                for i,item in enumerate(curFanStatus):
                    if cmp(item['errmsg'], 'OK') == 0:
                        syslog.syslog('%%PMON-0-FAN_PLUG_IN: %s'%(item['id']))
                    elif cmp(item['errmsg'], 'NOT OK') == 0:
                        syslog.syslog('%%PMON-0-FAN_FAILED: %s'%(item['id']))
                    else:
                        syslog.syslog('%%PMON-0-FAN_ABSENT: %s'%(item['id']))
                    self.preFanStatus.append(item)
            else:
                for i,item in enumerate(curFanStatus):
                    if cmp(item['errmsg'], self.preFanStatus[i]['errmsg']) == 0:
                        continue
                    else:
                        if cmp(item['errmsg'], 'OK') == 0 and cmp(self.preFanStatus[i]['errmsg'], 'ABSENT') == 0:
                            syslog.syslog('%%PMON-0-FAN_PLUG_IN: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'OK') == 0 and cmp(self.preFanStatus[i]['errmsg'], 'NOT OK') == 0:
                            syslog.syslog('%%PMON-0-FAN_PLUG_IN: %s. Recover from FAN FAILED.'%(item['id']))
                        elif cmp(item['errmsg'], 'NOT OK') == 0  and cmp(self.preFanStatus[i]['errmsg'], 'OK') == 0:
                            syslog.syslog('%%PMON-0-FAN_FAILED: %s.'%(item['id']))
                        elif cmp(item['errmsg'], 'NOT OK') == 0 and cmp(self.preFanStatus[i]['errmsg'], 'ABSENT') == 0:
                            syslog.syslog('%%PMON-0-FAN_PLUG_IN: %s'%(item['id']))
                            syslog.syslog('%%PMON-0-FAN_FAILED: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'ABSENT') == 0 and cmp(self.preFanStatus[i]['errmsg'], 'OK') == 0:
                            syslog.syslog('%%PMON-0-FAN_PLUG_OUT: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'ABSENT') == 0 and cmp(self.preFanStatus[i]['errmsg'], 'NOT OK') == 0:
                            syslog.syslog('%%PMON-0-FAN_PLUG_OUT: %s'%(item['id']))
                        self.preFanStatus.remove(self.preFanStatus[i])
                        self.preFanStatus.insert(i, item)

    def updatePsuStatus(self):
        curPsuStatus = []
        status.getPsu(curPsuStatus)
        curPsuStatus.sort(key = self.sortCallback)
        if cmp(self.prePsuStatus, curPsuStatus) != 0:
            if len(self.prePsuStatus) == 0:
                # first time
                for i,item in enumerate(curPsuStatus):
                    if cmp(item['errmsg'], 'OK') == 0:
                        syslog.syslog('%%PMON-0-PSU_PLUG_IN: %s'%(item['id']))
                    elif cmp(item['errmsg'], 'NOT OK') == 0:
                        syslog.syslog('%%PMON-0-PSU_FAILED: %s'%(item['id']))
                    else:
                        syslog.syslog('%%PMON-0-PSU_ABSENT: %s'%(item['id']))
                    self.prePsuStatus.append(item)
            else:
                for i,item in enumerate(curPsuStatus):
                    if cmp(item['errmsg'], self.prePsuStatus[i]['errmsg']) == 0:
                        continue
                    else:
                        if cmp(item['errmsg'], 'OK') == 0 and cmp(self.prePsuStatus[i]['errmsg'], 'ABSENT') == 0:
                            syslog.syslog('%%PMON-0-PSU_PLUG_IN: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'OK') == 0 and cmp(self.prePsuStatus[i]['errmsg'], 'NOT OK') == 0:
                            syslog.syslog('%%PMON-0-PSU_PLUG_IN: %s. Recover from PSU FAILED.'%(item['id']))
                        elif cmp(item['errmsg'], 'NOT OK') == 0  and cmp(self.prePsuStatus[i]['errmsg'], 'OK') == 0:
                            syslog.syslog('%%PMON-0-PSU_FAILED: %s.'%(item['id']))
                        elif cmp(item['errmsg'], 'NOT OK') == 0 and cmp(self.prePsuStatus[i]['errmsg'], 'ABSENT') == 0:
                            syslog.syslog('%%PMON-0-PSU_PLUG_IN: %s'%(item['id']))
                            syslog.syslog('%%PMON-0-PSU_FAILED: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'ABSENT') == 0 and cmp(self.prePsuStatus[i]['errmsg'], 'OK') == 0:
                            syslog.syslog('%%PMON-0-PSU_PLUG_OUT: %s'%(item['id']))
                        elif cmp(item['errmsg'], 'ABSENT') == 0 and cmp(self.prePsuStatus[i]['errmsg'], 'NOT OK') == 0:
                            syslog.syslog('%%PMON-0-PSU_PLUG_OUT: %s'%(item['id']))
                        self.prePsuStatus.remove(self.prePsuStatus[i])
                        self.prePsuStatus.insert(i, item)

    def getTempStatus(self):
        temp = []
        status.getTemp(temp)
        for i,item in enumerate(temp):
            '''
            if cmp(item['errmsg'], 'OK') != 0:
                syslog.syslog('%%PMON-0-TEMP_FAILED: %s'%(item['id']))
            elif float(item['temp1_input']) >= float(item['temp1_max']):
                syslog.syslog('%%PMON-0-TEMP_HIGH: %s temperature %sC is larger than max threshold %sC.'%(item['id'], item['temp1_input'], item['temp1_max']))
            '''
            if float(item['temp1_input']) >= float(item['temp1_max']):
                syslog.syslog('%%PMON-0-TEMP_HIGH: %s temperature %sC is larger than max threshold %sC.'%(item['id'], item['temp1_input'], item['temp1_max']))

def doWork(platform):
    platform.updateFanStatus()
    platform.updatePsuStatus()
    platform.getTempStatus()

def run(interval, platform):
    while True:
        try:
            doWork(platform)
            time.sleep(interval)
        except Exception as e:
            print(e)

if __name__ == '__main__':
    platform = platformSyslog()
    interval = 3
    run(interval, platform)
