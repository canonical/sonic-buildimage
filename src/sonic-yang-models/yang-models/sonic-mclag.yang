module sonic-mclag {
	namespace "http://github.com/Azure/sonic-mclag";
	prefix smclag;
	yang-version 1.1;


    import ietf-yang-types {
        prefix yang;
    }

	import ietf-inet-types {
		prefix inet;
	}

    import sonic-types {
        prefix stypes;
    }

    import sonic-extension {
        prefix sonic-ext;
    }
        prefix prt;
    }

    import sonic-portchannel {
        prefix spc;
    }

    import sonic-vlan {
        prefix svlan;
    }

	organization
		"SONiC";

	contact
		"SONiC";

	description
		"SONIC MCLAG";

	revision 2021-07-28 {
		description
			"Addressed review comments";
	}
	revision 2019-10-01 {
		description
			"Initial revision.";
	}

	container sonic-mclag {

        container MCLAG_DOMAIN {

            list MCLAG_DOMAIN_LIST { 
                key "domain_id";
                max-elements 1;

                leaf domain_id {
                    description  "MCLAG Domain ID";
                     type uint16 {
                        range "1..4095" {
                            error-message "MCLAG Domain ID out of range";
                        }
                    }
                }

                leaf source_ip {
                    type inet:ipv4-address;
                    description  "MCLAG Domain source ip address for session between MCLAG Peers";
                }
                leaf peer_ip {
                    type inet:ipv4-address;
                    description  "MCLAG Domain peer ip address for session between MCLAG Peers";
                }
                leaf peer_link {
                    type union {
                        description  "MCLAG Domain peer link, data backup path link between MCLAG peers";
                        type leafref {
                            path "/prt:sonic-port/prt:PORT/prt:PORT_LIST/prt:ifname";
                        }
                        type leafref {
                            path "/spc:sonic-portchannel/spc:PORTCHANNEL/spc:PORTCHANNEL_LIST/spc:name";
                        }
                    }
                }
                leaf keepalive_interval {
                    description  "keepalive interval in seconds for MCLAG session between peers";
                    type uint16 {
                        range "1..60" {
                            error-message "MCLAG Domain keepalive interval out of range";
                            error-app-tag keepalive_interval-invalid;
                        }
                    }
                    default 1;
                }
                leaf session_timeout {
                    description  "Session timeout in seconds for MCLAG session between peers";
                    type uint16 {
                        range "1..3600" {
                            error-message "MCLAG Domain session timeout out of range";
                            error-app-tag session_timeout-invalid;
                        }
                    }
                    default 30;
                }
                must "(keepalive_interval * 3) <= session_timeout" {
                        error-message "(keepalive interval * 3) <= session_timeout value";
                        error-app-tag keepalive_interval-invalid;
                }
            }
        }

        container MCLAG_INTERFACE { 

            list MCLAG_INTERFACE_LIST { 
                description  "List of MCLAG interfaces";
                key "domain_id if_name";

                leaf domain_id {
                    description  "List of MCLAG interfaces";
                    type leafref {
                        path "../../../MCLAG_DOMAIN/MCLAG_DOMAIN_LIST/domain_id";
                    }
                }

                leaf if_name {
                    description  "MCLAG interface name";
                    type leafref {
                        path "/spc:sonic-portchannel/spc:PORTCHANNEL/spc:PORTCHANNEL_LIST/spc:name";
                    }
                }
                leaf if_type {
                    description  "MCLAG interface type, placeholder field to create instance";
                    type string;
                }
            }
        }

        container MCLAG_UNIQUE_IP {

            list MCLAG_UNIQUE_IP_LIST {
                description  "List of VLANs allowed to have unique ip addresses on MCLAG Peer nodes";
                key "if_name";

                must "count(../../MCLAG_DOMAIN/MCLAG_DOMAIN_LIST/domain_id) != 0" {
                    error-message "mclag not configured";
                    error-app-tag mclag-invalid;
                }

                must
                    "count(/svlan:sonic-vlan/svlan:VLAN_INTERFACE/svlan:VLAN_INTERFACE_IPPREFIX_LIST[svlan:name=current()/if_name]) = 0" {
                    error-message "remove configured ip/v6 address and reconfigure after separate ip configuration";
                    error-app-tag vlan-intf-ip-invalid;
                }

                leaf if_name {
                    description  "Vlan interface name on which MCLAG unique ip config is done";
                    type leafref {
                        path "/svlan:sonic-vlan/svlan:VLAN/svlan:VLAN_LIST/svlan:name";
                    }
                }
                leaf unique_ip {
                    description  "unique ip enable, by default disable";
                    type enumeration {
                        enum enable;
                        enum disable;
                    }
                    default enable;
                }
            }
        }

        //stateDB MCLAG Table
        container MCLAG_TABLE { 
            sonic-ext:db-name "STATE_DB"; 
            sonic-ext:key-delim "|"; 

            config false;
            description "state db mclag domain table";

            list MCLAG_TABLE_LIST { 
                key "domain_id";

                leaf domain_id {
                     description "MCLAG Domain ID";
                     type uint16;
                }

                leaf oper_status {
                    description "MCLAG Domain operational status";
                    type stypes:oper-status;
                }

                leaf role {
                    description "MCLAG Peer role, active or standby based on config ip";
                    type enumeration {
						enum active;
						enum standby;
					}
                }

                leaf system_mac {
                    description "MCLAG common system mac address used by mclag peers";
                    type yang:mac-address;
                    description
                     "System MAC Address used for ICCPD";
                }
            }
        }

        //state MCLAG Local interface Table
        container MCLAG_LOCAL_INTF_TABLE { 

            sonic-ext:db-name "STATE_DB"; 
            sonic-ext:key-delim "|"; 

            config false;
            description "state db LOCAL interface table";

            list MCLAG_LOCAL_INTF_TABLE_LIST { 
                key "if_name";

                leaf if_name {
                    description "MCLAG interface name";
                    type string;
                }

                leaf port_isolate_peer_link {
                    description "MCLAG local interface port isolation state to indicate whether BUM traffic incoming on ISL is blocked on MCLAG Interface";
                    type boolean; 
                }
            }
        }


        //state MCLAG Remote interface Table
        container MCLAG_REMOTE_INTF_TABLE { 

            sonic-ext:db-name "STATE_DB"; 
            sonic-ext:key-delim "|"; 

            config false;
            description "state db remote interface table";

            list MCLAG_REMOTE_INTF_TABLE_LIST { 
                key "domain_id if_name";

                leaf domain_id {
                     type uint16;
                }

                leaf if_name {
                    description "MCLAG remote interface name";
                    type string;
                }

                leaf oper_status {
                    description "MCLAG remote interface operational status";
                    type stypes:oper-status;
                }
            }
        }
    }
}
