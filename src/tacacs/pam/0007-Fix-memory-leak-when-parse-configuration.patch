From a8b8c662b1520cbf0aafffb65ae108b4aa1bb73b Mon Sep 17 00:00:00 2001
From: liuh <liuh@microsoft.com>
Date: Fri, 1 Oct 2021 17:40:14 +0800
Subject: [PATCH 1/3] Fix memory leak when parse configuration.

---
 pam_tacplus.c |  28 +++++-------
 support.c     | 115 ++++++++++++++++++++++++++++++--------------------
 support.h     |   6 +--
 3 files changed, 83 insertions(+), 66 deletions(-)

diff --git a/pam_tacplus.c b/pam_tacplus.c
index 4a6f714..d062359 100644
--- a/pam_tacplus.c
+++ b/pam_tacplus.c
@@ -138,10 +138,8 @@ int _pam_account(pam_handle_t *pamh, int argc, const char **argv,
         syslog(LOG_DEBUG, "%s: tac_srv_no=%d", __FUNCTION__, tac_srv_no);
     }
 
-    if ((user = _pam_get_user(pamh)) == NULL) {
+    if ((user = _pam_get_user(pamh)) == NULL)
         return PAM_USER_UNKNOWN;
-    }
-
 
     if (ctrl & PAM_TAC_DEBUG)
         syslog(LOG_DEBUG, "%s: username [%s] obtained", __FUNCTION__, user);
@@ -179,7 +177,7 @@ int _pam_account(pam_handle_t *pamh, int argc, const char **argv,
 
     status = PAM_SESSION_ERR;
     for(srv_i = 0; srv_i < tac_srv_no; srv_i++) {
-        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, &tac_source_addr, tac_timeout, __vrfname);
+        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, tac_source_addr, tac_timeout, __vrfname);
         if (tac_fd < 0) {
             _pam_log(LOG_WARNING, "%s: error sending %s (fd)",
                 __FUNCTION__, typemsg);
@@ -210,7 +208,6 @@ int _pam_account(pam_handle_t *pamh, int argc, const char **argv,
         signal(SIGCHLD, SIG_DFL);
         signal(SIGHUP, SIG_DFL);
     }
-
     return status;
 }
 
@@ -241,9 +238,8 @@ int pam_sm_authenticate (pam_handle_t * pamh, int flags,
         syslog(LOG_DEBUG, "%s: called (pam_tacplus v%u.%u.%u)",
             __FUNCTION__, PAM_TAC_VMAJ, PAM_TAC_VMIN, PAM_TAC_VPAT);
 
-    if ((user = _pam_get_user(pamh)) == NULL) {
+    if ((user = _pam_get_user(pamh)) == NULL)
         return PAM_USER_UNKNOWN;
-    }
 
     if (ctrl & PAM_TAC_DEBUG)
         syslog(LOG_DEBUG, "%s: user [%s] obtained", __FUNCTION__, user);
@@ -280,7 +276,7 @@ int pam_sm_authenticate (pam_handle_t * pamh, int flags,
         if (ctrl & PAM_TAC_DEBUG)
             syslog(LOG_DEBUG, "%s: trying srv %d", __FUNCTION__, srv_i );
 
-        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, &tac_source_addr, tac_timeout, __vrfname);
+        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, tac_source_addr, tac_timeout, __vrfname);
         if (tac_fd < 0) {
             _pam_log(LOG_ERR, "%s: connection to srv %d failed", __FUNCTION__, srv_i);
             continue;
@@ -542,9 +538,8 @@ int pam_sm_acct_mgmt (pam_handle_t * pamh, int flags,
         syslog (LOG_DEBUG, "%s: called (pam_tacplus v%u.%u.%u)"
             , __FUNCTION__, PAM_TAC_VMAJ, PAM_TAC_VMIN, PAM_TAC_VPAT);
 
-    if ((user = _pam_get_user(pamh)) == NULL) {
+    if ((user = _pam_get_user(pamh)) == NULL)
         return PAM_USER_UNKNOWN;
-    }
 
     if (ctrl & PAM_TAC_DEBUG)
         syslog(LOG_DEBUG, "%s: username obtained [%s]", __FUNCTION__, user);
@@ -585,13 +580,11 @@ int pam_sm_acct_mgmt (pam_handle_t * pamh, int flags,
     if(tac_protocol[0] != '\0')
       tac_add_attrib(&attr, "protocol", tac_protocol);
 
-    tac_fd = tac_connect_single(active_server.addr, active_server.key, &tac_source_addr, tac_timeout, __vrfname);
+    tac_fd = tac_connect_single(active_server.addr, active_server.key, tac_source_addr, tac_timeout, __vrfname);
     if(tac_fd < 0) {
         _pam_log (LOG_ERR, "TACACS+ server unavailable");
-        if(arep.msg != NULL) {
+        if(arep.msg != NULL)
             free (arep.msg);
-        }
-
         return PAM_AUTH_ERR;
     }
 
@@ -672,6 +665,7 @@ int pam_sm_acct_mgmt (pam_handle_t * pamh, int flags,
         free (arep.msg);
 
     close(tac_fd);
+
     return status;
 }    /* pam_sm_acct_mgmt */
 
@@ -733,9 +727,8 @@ int pam_sm_chauthtok(pam_handle_t * pamh, int flags,
 
     if (   (pam_get_item(pamh, PAM_OLDAUTHTOK, &pam_pass) == PAM_SUCCESS)
         && (pam_pass != NULL) ) {
-         if ((pass = strdup(pam_pass)) == NULL) {
+         if ((pass = strdup(pam_pass)) == NULL)
               return PAM_BUF_ERR;
-         }
     } else {
         pass = strdup("");
     }
@@ -744,7 +737,6 @@ int pam_sm_chauthtok(pam_handle_t * pamh, int flags,
         if(pass) {
                 free(pass);
         }
-
         return PAM_USER_UNKNOWN;
     }
     
@@ -771,7 +763,7 @@ int pam_sm_chauthtok(pam_handle_t * pamh, int flags,
         if (ctrl & PAM_TAC_DEBUG)
             syslog(LOG_DEBUG, "%s: trying srv %d", __FUNCTION__, srv_i );
 
-        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, &tac_source_addr, tac_timeout, __vrfname);
+        tac_fd = tac_connect_single(tac_srv[srv_i].addr, tac_srv[srv_i].key, tac_source_addr, tac_timeout, __vrfname);
         if (tac_fd < 0) {
             _pam_log(LOG_ERR, "connection failed srv %d: %m", srv_i);
             continue;
diff --git a/support.c b/support.c
index d2ed770..ce3f18d 100644
--- a/support.c
+++ b/support.c
@@ -30,23 +30,24 @@
 #include <stdlib.h>
 #include <string.h>
 
-/* tacacs server information */
+/* tacacs server information */
 tacplus_server_t tac_srv[TAC_PLUS_MAXSERVERS];
-struct addrinfo tac_srv_addr[TAC_PLUS_MAXSERVERS];
-struct sockaddr tac_sock_addr[TAC_PLUS_MAXSERVERS];
-struct sockaddr_in6 tac_sock6_addr[TAC_PLUS_MAXSERVERS];
-
+struct addrinfo tac_srv_addr[TAC_PLUS_MAXSERVERS];
+struct sockaddr tac_sock_addr[TAC_PLUS_MAXSERVERS];
+struct sockaddr_in6 tac_sock6_addr[TAC_PLUS_MAXSERVERS];
+
 int tac_srv_no = 0;
 
 char tac_service[64];
 char tac_protocol[64];
 char tac_prompt[64];
 char *__vrfname=NULL;
-char tac_source_ip[64];
-
+char tac_source_ip[64];
+
 /* source address */
-struct addrinfo tac_source_addr;
-struct sockaddr tac_source_sock_addr;
+struct addrinfo *tac_source_addr=NULL;
+struct addrinfo tac_source_address;
+struct sockaddr tac_source_sock_addr;
 struct sockaddr_in6 tac_source_sock6_addr;
 
 void _pam_log(int err, const char *format,...) {
@@ -181,35 +182,59 @@ int tacacs_get_password (pam_handle_t * pamh, int flags
 
     return PAM_SUCCESS;
 }
-
-}
-/* set source ip address for the outgoing tacacs packets */
-void set_source_ip(const char *tac_source_ip) {
-    struct addrinfo hints, *source_address;
-    int rv;
-    /* set the source ip address for the tacacs packets */
-    memset(&hints, 0, sizeof(hints));
-    hints.ai_family = AF_UNSPEC;
-    hints.ai_socktype = SOCK_STREAM;
-    if ((rv = getaddrinfo(tac_source_ip, NULL, &hints,
-                          &source_address)) != 0) {
-        _pam_log(LOG_ERR, "error setting the source ip information");
-    } else {
-		memcpy(&tac_source_addr, source_address, sizeof(struct addrinfo));
-		if (source_address->ai_family == AF_INET6) {
-			tac_source_addr.ai_addr = (struct sockaddr *)&(tac_source_sock6_addr);
-			memcpy(tac_source_addr.ai_addr, source_address->ai_addr, sizeof(struct sockaddr_in6));
-		}
-		else {
-			tac_source_addr.ai_addr = &(tac_source_sock_addr);
-			memcpy(tac_source_addr.ai_addr, source_address->ai_addr, sizeof(struct sockaddr));
-		}
-		
-		
-        freeaddrinfo(source_address);
-        _pam_log(LOG_DEBUG, "source ip is set");
+
+/*
+ * Set tacacs server addrinfo.
+ */
+void set_tacacs_server_addr(int tac_srv_no, struct addrinfo* server) {
+    tac_srv[tac_srv_no].addr = &(tac_srv_addr[tac_srv_no]);
+    memcpy(tac_srv[tac_srv_no].addr, server, sizeof(struct addrinfo));
+
+    if (server->ai_family == AF_INET6) {
+        tac_srv[tac_srv_no].addr->ai_addr = (struct sockaddr *)&(tac_sock6_addr[tac_srv_no]);
+        memcpy(tac_srv[tac_srv_no].addr->ai_addr, server->ai_addr, sizeof(struct sockaddr_in6));
+    }
+    else {
+        tac_srv[tac_srv_no].addr->ai_addr = &(tac_sock_addr[tac_srv_no]);
+        memcpy(tac_srv[tac_srv_no].addr->ai_addr, server->ai_addr, sizeof(struct sockaddr));
     }
+
+    tac_srv[tac_srv_no].addr->ai_canonname = NULL;
+    tac_srv[tac_srv_no].addr->ai_next = NULL;
+}
+
+/* set source ip address for the outgoing tacacs packets */
+void set_source_ip(const char *tac_source_ip) {
+
+    struct addrinfo hints, *source_address;
+    int rv;
+
+    /* set the source ip address for the tacacs packets */
+    memset(&hints, 0, sizeof(hints));
+    hints.ai_family = AF_UNSPEC;
+    hints.ai_socktype = SOCK_STREAM;
+    if ((rv = getaddrinfo(tac_source_ip, NULL, &hints,
+                          &source_address)) != 0) {
+        _pam_log(LOG_ERR, "error setting the source ip information");
+    } else {
+        tac_source_addr = &tac_source_address;
+        memcpy(tac_source_addr, source_address, sizeof(struct addrinfo));
+
+        if (source_address->ai_family == AF_INET6) {
+            tac_source_addr->ai_addr = (struct sockaddr *)&(tac_source_sock6_addr);
+            memcpy(tac_source_addr->ai_addr, source_address->ai_addr, sizeof(struct sockaddr_in6));
+        }
+        else {
+            tac_source_addr->ai_addr = &(tac_source_sock_addr);
+            memcpy(tac_source_addr->ai_addr, source_address->ai_addr, sizeof(struct sockaddr));
+        }
+        
+        
+        freeaddrinfo(source_address);
+        _pam_log(LOG_DEBUG, "source ip is set");
+    }
 }
+
 int _pam_parse (int argc, const char **argv) {
     int ctrl = 0;
     char current_secret[256];
@@ -284,11 +309,11 @@ int _pam_parse (int argc, const char **argv) {
                 }
                 if ((rv = getaddrinfo(server_name, (port == NULL) ? "49" : port, &hints, &servers)) == 0) {
                     for(server = servers; server != NULL && tac_srv_no < TAC_PLUS_MAXSERVERS; server = server->ai_next) {
-                        /* set server address with allocate memory */
-                        set_tacacs_server_addr(tac_srv_no, server);
-
-                        /* copy secret to key */
-                        snprintf(tac_srv[tac_srv_no].key, sizeof(tac_srv[tac_srv_no].key), "%s", current_secret);
+                        /* set server address with allocate memory */
+                        set_tacacs_server_addr(tac_srv_no, server);
+
+                        /* copy secret to key */
+                        snprintf(tac_srv[tac_srv_no].key, sizeof(tac_srv[tac_srv_no].key), "%s", current_secret);
                         tac_srv_no++;
                     }
 
@@ -328,10 +353,10 @@ int _pam_parse (int argc, const char **argv) {
             }
         } else if(!strncmp(*argv, "vrf=", 4)) {
             __vrfname = strdup(*argv + 4);
-        } else if (!strncmp (*argv, "source_ip=", strlen("source_ip="))) {
-            /* source ip for the packets */
-            strncpy (tac_source_ip, *argv + strlen("source_ip="), sizeof(tac_source_ip));
-            set_source_ip (tac_source_ip);
+        } else if (!strncmp (*argv, "source_ip=", strlen("source_ip="))) {
+            /* source ip for the packets */
+            strncpy(tac_source_ip, arg + strlen("source_ip="), sizeof(tac_source_ip));
+            set_source_ip(tac_source_ip);
         } else {
             _pam_log (LOG_WARNING, "unrecognized option: %s", *argv);
         }
diff --git a/support.h b/support.h
index e88463e..097c349 100644
--- a/support.h
+++ b/support.h
@@ -27,8 +27,8 @@
 #include <security/pam_modules.h>
 
 typedef struct {
-    struct addrinfo *addr;
-    char key[256];
+    struct addrinfo *addr;
+    char key[256];
 } tacplus_server_t;
 
 extern tacplus_server_t tac_srv[TAC_PLUS_MAXSERVERS];
@@ -37,7 +37,7 @@ extern int tac_srv_no;
 extern char tac_service[64];
 extern char tac_protocol[64];
 extern char tac_prompt[64];
-extern struct addrinfo tac_source_addr;
+extern struct addrinfo *tac_source_addr;
 
 int _pam_parse (int, const char **);
 unsigned long _resolve_name (char *);
-- 
2.27.0.windows.1

