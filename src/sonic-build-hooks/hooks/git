#!/bin/bash

parse_config(){
    . /usr/local/share/buildinfo/scripts/buildinfo_base.sh
    REAL_COMMAND=$(get_command git)

    version_file=$VERSION_PATH/versions-git
    new_version_file=$BUILD_VERSION_PATH/versions-git

    MODE_CLONE=0
    # parse input parameters
    for para in "$@"
    do
        if [[ $para == "clone" ]];then
            MODE_CLONE=1
        fi
    done
}

get_clone_path(){
    # get paremater of clone path
    while (( "$#" )); do
        case $1 in
            -b|--branch|--reference|--reference-if-able|-c|--config|--origin|-u|--upload-pack|-j|--jobs|--depth|--dissociate)
                shift 2
                ;;
            clone|-l|--local|--no-hardlinks|-s|--shared|--dissociate|-q|--quiet|-v|--verbose|--progress|--server-option=*|--bare|--sparse|--filter=*|--template=*|--mirror|--reference|--shallow-*|--no-tags|--recurse-submodules*|--remote-submodules|--no-remote-submodules|--separate-git-dir*)
                shift 1
                ;;
            *)
                if [[ $URL == "" ]];then
                    URL=$1
                else
                    clone_PATH=$1
                fi
                shift 1
                ;;
        esac
    done

    # if not specific clone path, get default clone path
    [ -z $clone_PATH ] && clone_PATH=`echo $URL | awk -F/ '{print$NF}' | awk -F. '{print$1}'`
}

main(){
    parse_config "$@"

    # execute git.
    $REAL_COMMAND "$@"
    result=$?

    # if sub command is not "clone", exit
    if [[ $MODE_CLONE != 1 ]];then
        exit $result
    fi

    get_clone_path "$@"
    pushd $clone_PATH &> /dev/null
    commit_latest=`$REAL_COMMAND rev-parse HEAD`
    [ -f $version_file ] && commit=`grep $URL $version_file | awk -F, '{print$2}'`

    # record version file
    echo "$URL==$commit_latest" >> $new_version_file
    sort $new_version_file -o $new_version_file -u &> /dev/null

    # control version or record version file
    if [[ $ENABLE_VERSION_CONTROL_GIT == "y" ]];then
        # control version
        if [ -z $commit ]; then
            echo "Failed to verify the package: $URL, the version is not specified."
            exit 1
        fi
        $REAL_COMMAND reset --hard $commit &> /dev/null
    fi
    popd &> /dev/null

    exit $result
}

main "$@"
