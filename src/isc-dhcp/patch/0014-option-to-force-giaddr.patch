From 57913f7f7fc24b66372a5e144ce4a028fea5c61c Mon Sep 17 00:00:00 2001
From: Jens Elkner <jel+git@iks.cs.uni-magdeburg.de>
Date: Sat, 29 Jan 2022 09:32:04 +0100
Subject: [PATCH 1/8] dhcrelay: option to force giaddr

Use option  -g ipaddr  to replace the giaddr sent to clients with
the given ipaddr to workaround bogus clients like Solaris 11 grub
which use giaddr instead of the announced router (3) to setup its
default route.
---
 relay/dhcrelay.8 | 10 ++++++++++
 relay/dhcrelay.c | 29 +++++++++++++++++++++++++----
 2 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/relay/dhcrelay.8 b/relay/dhcrelay.8
index 53cd28b..8b186b8 100644
--- a/relay/dhcrelay.8
+++ b/relay/dhcrelay.8
@@ -103,6 +103,10 @@ dhcrelay - Dynamic Host Configuration Protocol Relay Agent
 .B -U
 .I interface
 ]
+[
+.B -g
+.I ipaddr
+]
 .I server0
 [
 .I ...serverN
@@ -234,6 +238,12 @@ Information options that indicate they were generated in response to
 a query that came via a different relay agent.  If this option is not
 specified, such packets will be relayed anyway.
 .TP
+-g \fIipaddr\fR
+When a package gets sent back to the client, replace the gateway's IP
+address (giaddr) with the given \fIipaddr\fR. This can be used as a
+workaround for bogus clients like Solaris 11 grub, which use the giaddr
+instead of the announced router (3) to setup its default route.
+.TP
 -i \fIifname\fR
 Listen for DHCPv4/BOOTP traffic on interface \fIifname\fR.  Multiple
 interfaces may be specified by using more than one \fB-i\fR option.  If
diff --git a/relay/dhcrelay.c b/relay/dhcrelay.c
index ff0ad17..5009dc1 100644
--- a/relay/dhcrelay.c
+++ b/relay/dhcrelay.c
@@ -117,6 +117,8 @@ struct server_list {
 } *servers;
 
 struct interface_info *uplink = NULL;
+isc_boolean_t use_fake_gw = ISC_FALSE;
+struct in_addr gw = {0};
 
 #ifdef DHCPv6
 struct stream_list {
@@ -199,7 +201,7 @@ char *progname;
 "                     [-i interface0 [ ... -i interfaceN]\n" \
 "                     [-iu interface0 [ ... -iu interfaceN]\n" \
 "                     [-id interface0 [ ... -id interfaceN]\n" \
-"                     [-U interface]\n" \
+"                     [-U interface] [-g <ip-address>]\n" \
 "                     [-dt]\n"\
 "                     server0 [ ... serverN]\n\n" \
 "       %s -6   [-d] [-q] [-I] [-c <hops>]\n" \
@@ -221,7 +223,7 @@ char *progname;
 "                     [-i interface0 [ ... -i interfaceN]\n" \
 "                     [-iu interface0 [ ... -iu interfaceN]\n" \
 "                     [-id interface0 [ ... -id interfaceN]\n" \
-"                     [-U interface]\n" \
+"                     [-U interface] [-g <ip-address>]\n" \
 "                     [-dt]\n"\
 "                     server0 [ ... serverN]\n\n" \
 "       %s -6   [-d] [-q] [-I] [-c <hops>] [-p <port>]\n" \
@@ -243,7 +245,7 @@ char *progname;
 "                [-i interface0 [ ... -i interfaceN]\n" \
 "                [-iu interface0 [ ... -iu interfaceN]\n" \
 "                [-id interface0 [ ... -id interfaceN]\n" \
-"                [-U interface]\n" \
+"                [-U interface] [-g <ip-address>]\n" \
 "                [-dt]\n"\
 "                server0 [ ... serverN]\n\n" DHCRELAY_OPTION82_USAGE \
 "       %s {--version|--help|-h}"
@@ -255,7 +257,7 @@ char *progname;
 "                [-i interface0 [ ... -i interfaceN]\n" \
 "                [-iu interface0 [ ... -iu interfaceN]\n" \
 "                [-id interface0 [ ... -id interfaceN]\n" \
-"                [-U interface]\n" \
+"                [-U interface] [-g <ip-address>]\n" \
 "                [-dt]\n"\
 "                server0 [ ... serverN]\n\n" DHCRELAY_OPTION82_USAGE \
 "       %s {--version|--help|-h}"
@@ -593,6 +595,21 @@ main(int argc, char **argv) {
 			/* Turn on -a, in case they don't do so explicitly */
 			add_agent_options = 1;
 			add_rfc3527_suboption = 1;
+		} else if (!strcmp(argv[i], "-g")) {
+			if (++i == argc)
+				usage(use_noarg, argv[i-1]);
+#ifdef DHCPv6
+			if (local_family_set && (local_family == AF_INET6)) {
+				usage(use_v4command, argv[i]);
+			}
+			local_family_set = 1;
+			local_family = AF_INET;
+#endif
+			if (inet_pton(AF_INET, argv[i], &gw) <= 0) {
+				usage("Invalid gateway address '%s'", argv[i]);
+			} else {
+				use_fake_gw = ISC_TRUE;
+			}
 		} else if (!strcmp(argv[i], "-D")) {
 #ifdef DHCPv6
 			if (local_family_set && (local_family == AF_INET6)) {
@@ -969,6 +986,7 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 		if (enable_support_for_dual_tor && !out)
 			return;
 
+		log_debug("BOOTREPLY giaddr: %s\n", inet_ntoa(packet->giaddr));
 		if (!(packet->flags & htons(BOOTP_BROADCAST)) &&
 			can_unicast_without_arp(out)) {
 			to.sin_addr = packet->yiaddr;
@@ -1011,6 +1029,9 @@ do_relay4(struct interface_info *ip, struct dhcp_packet *packet,
 			return;
 		}
 
+		if (use_fake_gw) {
+			packet->giaddr = gw;
+		}
 		if (send_packet(out, NULL, packet, length, out->addresses[0],
 				&to, htop) < 0) {
 			++server_packet_errors;
-- 
GitLab

