import os
import signal
import json
import syslog
from collections import deque
from dhcp_server_utils import LEASE_FILE_PATH, DHCP_SERVER_IPV4_LEASE, DHCP_SERVER_IP_PORTS_FILE
from dhcp_server_utils import DhcpDbConnector
from functools import partial

KEA_DHCP4_CONFIG = "/etc/kea/kea-dhcp4.conf"


def update_lease_handler(signum, frame, db_connector):
    """
    Hanlder function to update lease table in STATE_DB
    """
    # Read lease file generated by kea-dhcp4
    lease_obj = {}
    with open(LEASE_FILE_PATH, "r", encoding="utf-8") as fb:
        dq = deque(fb)
    while dq:
        last_row = dq.pop()
        splits = last_row.split(",")
        if splits[0] == "address":
            break
        ip_str = splits[0]
        mac_address = splits[1]
        if mac_address in lease_obj:
            continue
        valid_lifetime = splits[3]
        lease_end = splits[4]
        lease_obj[mac_address] = {
            "lease_start": str(int(lease_end) - int(valid_lifetime)),
            "lease_end": lease_end,
            "ip": ip_str
        }

    lease_table = db_connector.get_state_db_table(DHCP_SERVER_IPV4_LEASE)
    old_keys = lease_table.getKeys()
    try:
        with open(DHCP_SERVER_IP_PORTS_FILE, "r", encoding="utf8")as fp:
            json_data = json.load(fp)
            subnet4_list = json_data["subnet4"]
    except FileNotFoundError:
        syslog.syslog(syslog.LOG_ERR, "Cannot find configuration file for kea-dhcp4")


def register_signal_hanlder(expected_signal, handler_func, db_connector):
    """
    Add signal handler
    """
    # Listen SIGUSR1 to update lease table.
    partial_signal_handler = partial(handler_func, db_connector=db_connector)
    signal.signal(expected_signal, partial_signal_handler)


def generate_kea_dhcp4_config():
    os.system("sonic-dhcp-server-cfggen -d > {}".format(KEA_DHCP4_CONFIG))


def main():
    generate_kea_dhcp4_config()
    dhcp_db_connector = DhcpDbConnector()
    # Once receive SIGUSR1 signal, update lease table in state_db
    register_signal_hanlder(signal.SIGUSR1, update_lease_handler, dhcp_db_connector)


if __name__ == "__main__":
    main()
