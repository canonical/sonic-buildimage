{
    "Dhcp4": {
        "hooks-libraries": [
            {
                "library": "/usr/local/lib/kea/hooks/libdhcp_run_script.so",
                "parameters": {
                    "name": "{{ lease_update_script_path }}",
                    "sync": false
                }
            }
        ],
        "interfaces-config": {
            "interfaces": [
                "eth0"
            ]
        },
        "control-socket": {
            "socket-type": "unix",
            "socket-name": "/run/kea/kea4-ctrl-socket"
        },
        "lease-database": {
            "type": "memfile",
            "persist": true,
            "name": "{{ lease_path }}",
            "lfc-interval": 3600
        },
        "subnet4": [
{%- set has_port_config = { 'flag': False } %}
{%- if dhcp_server_ipv4 %}
    {%- for dhcp_server_entry in dhcp_server_ipv4 if "state" in dhcp_server_ipv4[dhcp_server_entry] and dhcp_server_ipv4[dhcp_server_entry]["state"] == "enabled" and dhcp_server_entry in vlan_interface %}
        {%- if "mode" in dhcp_server_ipv4[dhcp_server_entry] %}
            {%- if dhcp_server_ipv4[dhcp_server_entry]["mode"] == "PORT" %}
                {%- for dhcp_interface_ip in port_ips[dhcp_server_entry] %}
            {
                "subnet": "{{ port_ips[dhcp_server_entry][dhcp_interface_ip]["subnet"] }}",
                "pools": [
                {%- set server_id = dhcp_interface_ip.split("/")[0] -%}
                {%- set lease_time = default_lease_time %}
                {%- if "lease_time" in dhcp_server_ipv4[dhcp_server_entry] %}
                    {%- set lease_time = dhcp_server_ipv4[dhcp_server_entry]["lease_time"] %}
                {%- endif %}
                {%- set gateway = server_id %}
                {%- if "gateway" in dhcp_server_ipv4[dhcp_server_entry] %}
                    {%- set gateway = dhcp_server_ipv4[dhcp_server_entry]["gateway"] %}
                {%- endif %}
                    {%- set add_preceding_comma = { 'flag': False } %}
                    {%- for member_intf in port_ips[dhcp_server_entry][dhcp_interface_ip] if member_intf != "subnet" %}
                            {%- set ranges = port_ips[dhcp_server_entry][dhcp_interface_ip][member_intf] %}
                            {%- for range in ranges %}
                                {%- if add_preceding_comma.flag -%},{%- endif -%}
                                {%- set _dummy = add_preceding_comma.update({'flag': True}) %}
                                {%- set _dummy = has_port_config.update({'flag': True}) %}
                    {
                        "pool": "{{ range[0] }} - {{ range[1] }}",
                        "client-class": "{{ hostname }}:{{ member_intf }}"
                    }
                            {%- endfor %}
                    {%- endfor %}
                ],
                "option-data": [
                    {
                        "name": "routers",
                        "data": "{{ gateway }}"
                    },
                    {
                        "name": "dhcp-server-identifier",
                        "data": "{{ server_id }}"
                    } {# TODO Add support for customized options #}
                ],
                "valid-lifetime": {{ lease_time }},
                "reservations": []
            }
                {%- endfor %}
            {%- endif %}
        {%- endif %}
    {%- endfor -%}
{% endif %}
        ],
        "loggers": [
            {
                "name": "kea-dhcp4",
                "output_options": [
                    {
                        "output": "/var/log/kea-dhcp.log",
                        "pattern": "%-5p %m\n"
                    }
                ],
                "severity": "INFO",
                "debuglevel": 0
            }
        ]{%- if has_port_config.flag -%},
        "client-classes": [
            {%- set add_preceding_comma = { 'flag': False } %}
            {%- for dhcp_interface_value in port_ips.values() %}
                {%- for intf_value in dhcp_interface_value.values() %}
                    {%- for intf in intf_value if intf != "subnet" %}
                        {%- if add_preceding_comma.flag %},{% endif -%}
                        {% set _dummy = add_preceding_comma.update({'flag': True}) %}
            {
                "name": "{{hostname}}:{{intf}}",
                "test": "relay4[1].hex == '{{hostname}}:{{intf}}'"
            }
                    {%- endfor %}
                {%- endfor %}
            {%- endfor %}
        ]
        {%- endif %}
    }
}
