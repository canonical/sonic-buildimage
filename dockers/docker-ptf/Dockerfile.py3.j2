# {% set prefix = DEFAULT_CONTAINER_REGISTRY %}
# {% if CONFIGURED_ARCH == "armhf" and MULTIARCH_QEMU_ENVIRON == "y" %}
# FROM {{ prefix }}multiarch/debian-debootstrap:armhf-stretch
# {% elif CONFIGURED_ARCH == "arm64" and MULTIARCH_QEMU_ENVIRON == "y" %}
# FROM {{ prefix }}multiarch/debian-debootstrap:arm64-stretch
# {% else %}
# FROM {{ prefix }}debian:buster
# {% endif %}
# 
# {% from "dockers/dockerfile-macros.j2" import install_python_wheels, copy_files %}

FROM debian:bullseye

USER root
WORKDIR /root

MAINTAINER Pavel Shirshov

# COPY ["sources.list.{{ CONFIGURED_ARCH }}", "/etc/apt/sources.list"]
# COPY ["no-check-valid-until", "/etc/apt/apt.conf.d"]

## Make apt-get non-interactive
ENV DEBIAN_FRONTEND=noninteractive

## Set the apt source, update package cache and install necessary packages
## TODO: Clean up this step
RUN apt-get update          \
    && apt-get upgrade -y   \
    && apt-get dist-upgrade -y  \
    && apt-get install -y   \
        autoconf            \
        openssh-server      \
        vim                 \
        telnet              \
        net-tools           \
        traceroute          \
        lsof                \
        tcpdump             \
        ethtool             \
        unzip               \
        pkg-config          \
        binutils            \
        build-essential     \
        libssl-dev          \
        libffi-dev          \
        wget                \
        cmake               \
        libqt5core5a        \
        libqt5network5      \
        libboost-atomic1.74.0 \
        less                \
        git                 \
        iputils-ping        \
        hping3              \
        curl                \
        tmux                \
        python3             \
        python3-venv        \
        python3-pip         \
        python3-dev         \
        python3-scapy       \
        python3-six         \
        libpcap-dev         \
        rsyslog             \
        ntp                 \
        ntpstat             \
        ntpdate             \
        arping              \
        bridge-utils        \
        libteam-utils       \
        gdb                 \
        automake            \
        iproute2            \
        wireshark-common

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 \
    && update-alternatives --install /usr/bin/pdb pdb /usr/bin/pdb3 1 \
    && update-alternatives --install /usr/bin/pydoc pydoc /usr/bin/pydoc3 1 \
    && update-alternatives --install /usr/bin/pygettext pygettext /usr/bin/pygettext3 1


# Install all python modules from pypi. python-scapy is exception, ptf debian package requires python-scapy
# TODO: Clean up this step

#    && git clone https://github.com/p4lang/scapy-vxlan.git \
#    && cd scapy-vxlan \
#    && python setup.py install \
#    && cd .. \
#    && rm -fr scapy-vxlan \

RUN rm -rf /debs \
    && apt-get -y autoclean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && wget --https-only https://bootstrap.pypa.io/get-pip.py \
    && python get-pip.py \
    && rm -f get-pip.py \
    && pip install setuptools \
    && pip install supervisor \
    && pip install ipython==5.4.1 \
    && git clone https://github.com/sflow/sflowtool \
    && cd sflowtool \
    && ./boot.sh \
    && ./configure \
    && make \
    && make install \
    && cd  .. \
    && rm -fr sflowtool \
    && git clone https://github.com/dyninc/OpenBFDD.git \
    && cd OpenBFDD \
    && ./autogen.sh \
    && ./configure \
    && make \
    && make install \
    && cd  .. \
    && rm -fr OpenBFDD \
    && wget https://github.com/nanomsg/nanomsg/archive/1.0.0.tar.gz \
    && tar xvfz 1.0.0.tar.gz \
    && cd nanomsg-1.0.0    \
    && mkdir -p build      \
    && cd build            \
    && cmake ..            \
    && make install        \
    && ldconfig            \
    && cd ../..            \
    && rm -fr nanomsg-1.0.0 \
    && rm -f 1.0.0.tar.gz  \
    && pip install cffi    \
    && pip install nnpy    \
    && pip install dpkt    \
    && pip install ipaddress \
    && pip install pysubnettree \
    && pip install paramiko \
    && pip install flask   \
    && pip install exabgp==4.0 \
    && pip install pyaml   \
    && pip install pybrctl pyro4 rpyc yabgp \
    && pip install unittest-xml-reporting \
    && pip install pyrasite \
    && pip install retrying \
    && mkdir -p /opt       \
    && cd /opt             \
    && wget https://raw.githubusercontent.com/p4lang/ptf/master/ptf_nn/ptf_nn_agent.py

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONIOENCODING=UTF-8

RUN python -m pip install --upgrade --ignore-installed pip

# Install all python modules from pypi. python3-scapy is exception, ptf debian package requires python3-scapy
RUN python -m pip install setuptools \
    && pip install Cython \
    && pip install python-libpcap \
    && pip install enum34 \
    && pip install grpcio \
    && pip install grpcio-tools \
    && pip install protobuf \
    && pip install six==1.16.0 \
    && pip install itsdangerous \
    && pip install jinja2 \
    && pip install scapy==2.5.0 \
    && pip install thrift

# {% if docker_ptf_whls.strip() -%}
# Copy locally-built Python wheel dependencies
# {{ copy_files("python-wheels/", docker_ptf_whls.split(' '), "/python-wheels/") }}

# Install locally-built Python wheel dependencies
# {{ install_python_wheels(docker_ptf_whls.split(' ')) }}
# {% endif %}

# Deactivating a virtualenv.
# ENV PATH="$BACKUP_OF_PATH"

## Adjust sshd settings
RUN mkdir /var/run/sshd \
    && echo 'root:root' | chpasswd \
    && sed -ri '/^#?PermitRootLogin/c\PermitRootLogin yes' /etc/ssh/sshd_config \
    && sed -ri '/^#?UsePAM/c\UsePAM no' /etc/ssh/sshd_config \
    && sed -ri '/^#?UseDNS/c\UseDNS no' /etc/ssh/sshd_config

COPY supervisord.conf /etc/supervisor/
COPY conf.d/ /etc/supervisor/conf.d/
COPY ptf_tgen.sh /ptf_tgen/

# Move tcpdump into /usr/bin Otherwise it's impossible to run tcpdump due to a docker bug
# RUN mv /usr/sbin/tcpdump /usr/bin/tcpdump
# RUN ln -s /usr/bin/tcpdump /usr/sbin/tcpdump

RUN mkdir -p /var/log/supervisor

# Install Python-based GNMI client
# Install all dependencies from requirements except futures==3.2.0
RUN git clone https://github.com/lguohan/gnxi.git \
    && cd gnxi \
    && git checkout 3adf8b9 \
    && cd gnmi_cli_py \
    && cat requirements.txt | while read pkg; do [[ "$pkg" == futures==* ]] && continue; pip install "$pkg"; done

# COPY \
# {% for deb in docker_ptf_debs.split(' ') -%}
# debs/{{ deb }}{{' '}}
# {%- endfor -%}
# debs/

# RUN dpkg -i \
# {% for deb in docker_ptf_debs.split(' ') -%}
# debs/{{ deb }}{{' '}}
# {%- endfor %}

# COPY ["*.ini", "/etc/ptf/"]
EXPOSE 22 8009

ENTRYPOINT ["/usr/local/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
