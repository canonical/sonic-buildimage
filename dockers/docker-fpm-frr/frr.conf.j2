!
{% block banner %}
! =========== Managed by sonic-cfggen DO NOT edit manually! ====================
! generated by templates/frr/frr.conf.j2 with config DB data
! file: frr.conf
!
{% endblock banner %}
!
{% block system_init %}
hostname {{ DEVICE_METADATA['localhost']['hostname'] }}
password zebra
log syslog informational
log facility local4
agentx
! enable password {# {{ en_passwd }} TODO: param needed #}
{% endblock system_init %}
!
{% block interfaces %}
! Enable link-detect (default disabled)
{% for (name, prefix) in INTERFACE|pfx_filter %}
interface {{ name }}
link-detect
!
{% endfor %}
{% for pc in PORTCHANNEL %}
interface {{ pc }}
link-detect
!
{% endfor %}
{% endblock interfaces %}
!
{% block default_route %}
{% if MGMT_INTERFACE %}
! set static default route to mgmt gateway as a backup to learned default
{% for (name, prefix) in MGMT_INTERFACE|pfx_filter %}
{% if prefix | ipv4 %}
ip route 0.0.0.0/0 {{ MGMT_INTERFACE[(name, prefix)]['gwaddr'] }} 200
{% endif %}
{% endfor %}
{% endif %}
{% endblock default_route %}
!
{% block static_route %}
{% if STATIC_ROUTE %}
{% set glb_rt = {} %}
{% set vrf_rt = {} %}
{% for rt_key in STATIC_ROUTE %}
{%   if rt_key is not string() %}
{%     if vrf_rt.has_key(rt_key[0]) or vrf_rt.update({rt_key[0]:{}}) %}
{%     endif %}
{%     if vrf_rt[rt_key[0]].update({rt_key[1]:STATIC_ROUTE[rt_key]}) %}
{%     endif %}
{%   else %}
{%     if glb_rt.update({rt_key:STATIC_ROUTE[rt_key]}) %}
{%     endif %}
{%   endif %}
{% endfor %}
{% for rt_key, rt_attr in glb_rt|dictsort %}
{% if rt_attr.has_key('distance') and rt_attr['distance'] | int != 1 %}
{% if rt_attr.has_key('nexthop-vrf') %}
ip route {{ rt_key }} {{ rt_attr['nexthop'] }} {{ rt_attr['distance'] }} nexthop-vrf {{ rt_attr['nexthop-vrf'] }}
{% else %}
ip route {{ rt_key }} {{ rt_attr['nexthop'] }} {{ rt_attr['distance'] }}
{% endif %}
{% else %}
{% if rt_attr.has_key('nexthop-vrf') %}
ip route {{ rt_key }} {{ rt_attr['nexthop'] }} nexthop-vrf {{ rt_attr['nexthop-vrf'] }}
{% else %}
ip route {{ rt_key }} {{ rt_attr['nexthop'] }}
{% endif %}
{% endif %}
{% endfor %}
!
{% for vrf, rt in vrf_rt|dictsort %}
vrf {{ vrf }}
{% for rt_key, rt_attr in rt|dictsort %}
{% if rt_attr.has_key('distance') and rt_attr['distance'] | int != 1 %}
{% if rt_attr.has_key('nexthop-vrf') %}
  ip route {{ rt_key }} {{ rt_attr['nexthop'] }} {{ rt_attr['distance'] }} nexthop-vrf {{ rt_attr['nexthop-vrf'] }}
{% else %}
  ip route {{ rt_key }} {{ rt_attr['nexthop'] }} {{ rt_attr['distance'] }}
{% endif %}
{% else %}
{% if rt_attr.has_key('nexthop-vrf') %}
  ip route {{ rt_key }} {{ rt_attr['nexthop'] }} nexthop-vrf {{ rt_attr['nexthop-vrf'] }}
{% else %}
  ip route {{ rt_key }} {{ rt_attr['nexthop'] }}
{% endif %}
{% endif %}
{% endfor %}
!
{% endfor %}
{% endif %}
{% endblock static_route %}
{% block source_loopback %}
{% set lo_ipv4_addrs = [] %}
{% set lo_ipv6_addrs = [] %}
{% if LOOPBACK_INTERFACE %}
{%   for (name, prefix) in LOOPBACK_INTERFACE|pfx_filter %}
{%     if name == 'Loopback0' %}
{%       if prefix | ipv6 %}
{%         if lo_ipv6_addrs.append(prefix) %}
{%         endif %}
{%       else %}
{%         if lo_ipv4_addrs.append(prefix) %}
{%         endif %}
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}
! Set ip source to loopback for bgp learned routes
route-map RM_SET_SRC permit 10
    set src {{ lo_ipv4_addrs[0] | ip }}
!
{% if lo_ipv6_addrs|length > 0 %} 
route-map RM_SET_SRC6 permit 10
    set src {{ lo_ipv6_addrs[0] | ip }}
!
{% endif %}
ip protocol bgp route-map RM_SET_SRC
!
{% if lo_ipv6_addrs|length > 0 %}
ipv6 protocol bgp route-map RM_SET_SRC6
!
{% endif %}
{% endblock source_loopback %}
!
{% block bgp %}
{% if DEVICE_METADATA['localhost'].has_key('bgp_asn') %}
{# block bgp_init #}
!
! bgp multiple-instance
!
route-map FROM_BGP_SPEAKER_V4 permit 10
!
route-map TO_BGP_SPEAKER_V4 deny 10
!
{% set vrf_lo_intf = {} %}
{% for (name, prefix) in LOOPBACK_INTERFACE|pfx_filter %}
{%   set intf_vrf = 'global' %}
{%   if LOOPBACK_INTERFACE.has_key(name) and LOOPBACK_INTERFACE[name].has_key('vrf_name') %}
{%     set intf_vrf = LOOPBACK_INTERFACE[name]['vrf_name'] %}
{%   endif %}
{%   if vrf_lo_intf.has_key(intf_vrf) or vrf_lo_intf.update({intf_vrf:[]}) %}
{%   endif %}
{%   if name not in vrf_lo_intf[intf_vrf] and vrf_lo_intf[intf_vrf].append(name) %}
{%   endif %}
{% endfor %}
{% set vrf_routers = [] %}
{% set vrf_bgp_nbr = {} %}
{% for nbr_key in BGP_NEIGHBOR %}
{%   if nbr_key | length == 2 %}
{%     set nbr_vrf = nbr_key[0] %}
{%     set nbr_addr = nbr_key[1] %}
{%   else %}
{%     set nbr_vrf = 'global' %}
{%     set nbr_addr = nbr_key %}
{%   endif %}
{%   if nbr_vrf in vrf_routers or vrf_routers.append(nbr_vrf) %}
{%   endif %}
{%   if vrf_bgp_nbr.has_key(nbr_vrf) or vrf_bgp_nbr.update({nbr_vrf:{}}) %}
{%   endif %}
{%   if vrf_bgp_nbr[nbr_vrf].update({nbr_addr:BGP_NEIGHBOR[nbr_key]}) %}
{%   endif %}
{% endfor %}
{% set vrf_bgp_pr = {} %}
{% for pr_key in BGP_PEER_RANGE %}
{%   set pr_vrf = 'global' %}
{%   if BGP_PEER_RANGE[pr_key].has_key('vrf_name') %}
{%     set pr_vrf = BGP_PEER_RANGE[pr_key]['vrf_name'] %}
{%   endif %}
{%   if pr_vrf not in vrf_routers and vrf_routers.append(pr_vrf) %}
{%   endif %}
{%   if vrf_bgp_pr.has_key(pr_vrf) or vrf_bgp_pr.update({pr_vrf:{}}) %}
{%   endif %}
{%   if vrf_bgp_pr[pr_vrf].update({pr_key:BGP_PEER_RANGE[pr_key]}) %}
{%   endif %}
{% endfor %}
{% for vrf in vrf_routers|sort %}
{% if vrf == 'global' %}
router bgp {{ DEVICE_METADATA['localhost']['bgp_asn'] }}
{% else %}
router bgp {{ DEVICE_METADATA['localhost']['bgp_asn'] }} vrf {{ vrf }}
{% endif %}
  bgp log-neighbor-changes
  bgp bestpath as-path multipath-relax
  no bgp default ipv4-unicast
{# Advertise graceful restart capability for ToR #}
{% if DEVICE_METADATA['localhost']['type'] == 'ToRRouter' %}
  bgp graceful-restart
{% endif %}
{% set vrf_lo0 = "" %}
{% if vrf_lo_intf[vrf] | length > 0 %}
{% set vrf_lo0 = vrf_lo_intf[vrf][0] %}
{% endif %}
{% for (name, prefix) in LOOPBACK_INTERFACE|pfx_filter %}
{% if prefix | ipv4 and name == vrf_lo0 %}
  bgp router-id {{ prefix | ip }}
{% endif %}
{% endfor %}
{# advertise loopback #}
{% for (name, prefix) in LOOPBACK_INTERFACE|pfx_filter %}
{% if prefix | ipv4 and name == vrf_lo0 %}
  network {{ prefix | ip }}/32
{% elif prefix | ipv6 and name == vrf_lo0 %}
  address-family ipv6
    network {{ prefix | ip }}/64
  exit-address-family
{% endif %}
{% endfor %}
{# endblock bgp_init #}
{# block vlan_advertisement #}
{% for (name, prefix) in VLAN_INTERFACE|pfx_filter %}
{% set vlan_intf_vrf = 'global' %}
{% if VLAN_INTERFACE.has_key(name) and VLAN_INTERFACE[name].has_key('vrf_name') %}
{% set vlan_intf_vrf = VLAN_INTERFACE[name]['vrf_name'] %}
{% endif %}
{% if vlan_intf_vrf == vrf %}
{% if prefix | ipv4 %}
  network {{ prefix }}
{% elif prefix | ipv6 %}
  address-family ipv6
   network {{ prefix }}
  exit-address-family
{% endif %}
{% endif %}
{% endfor %}
{# endblock vlan_advertisement #}
{# block bgp_sessions #}
{% if vrf_bgp_nbr.has_key(vrf) %}
{% for neighbor_addr, bgp_session in vrf_bgp_nbr[vrf]|dictsort %}
{% if bgp_session['asn'] | int != 0 %}
  neighbor {{ neighbor_addr }} remote-as {{ bgp_session['asn'] }}
  neighbor {{ neighbor_addr }} description {{ bgp_session['name'] }}
{# set the bgp neighbor timers if they have not default values #}
{% if     (bgp_session['keepalive'] is defined and bgp_session['keepalive'] | int != 60)
      or  (bgp_session['holdtime'] is defined  and bgp_session['holdtime']  | int != 180) %}
  neighbor {{ neighbor_addr }} timers {{ bgp_session['keepalive'] }} {{ bgp_session['holdtime'] }}
{% endif %}
{% if bgp_session.has_key('admin_status') and bgp_session['admin_status'] == 'down' or not bgp_session.has_key('admin_status') and DEVICE_METADATA['localhost'].has_key('default_bgp_status') and DEVICE_METADATA['localhost']['default_bgp_status'] == 'down' %}
  neighbor {{ neighbor_addr }} shutdown
{% endif %}
{% if neighbor_addr | ipv4 %}
  address-family ipv4
{% if DEVICE_METADATA['localhost']['type'] == 'ToRRouter' %}
    neighbor {{ neighbor_addr }} allowas-in 1
{% endif %}
    neighbor {{ neighbor_addr }} activate
    neighbor {{ neighbor_addr }} soft-reconfiguration inbound
{% if bgp_session['rrclient'] | int != 0 %}
    neighbor {{ neighbor_addr }} route-reflector-client
{% endif %}
{% if bgp_session['nhopself'] | int != 0 %}
    neighbor {{ neighbor_addr }} next-hop-self
{% endif %}
    maximum-paths 64
  exit-address-family
{% endif %}
{% if neighbor_addr | ipv6 %}
  address-family ipv6
{% if DEVICE_METADATA['localhost']['type'] == 'ToRRouter' %}
    neighbor {{ neighbor_addr }} allowas-in 1
{% endif %}
    neighbor {{ neighbor_addr }} activate
    neighbor {{ neighbor_addr }} soft-reconfiguration inbound
{% if bgp_session['rrclient'] | int != 0 %}
    neighbor {{ neighbor_addr }} route-reflector-client
{% endif %}
{% if bgp_session['nhopself'] | int != 0 %}
    neighbor {{ neighbor_addr }} next-hop-self
{% endif %}
{% if bgp_session['asn'] != DEVICE_METADATA['localhost']['bgp_asn'] %}
    neighbor {{ neighbor_addr }} route-map set-next-hop-global-v6 in
{% endif %}
    maximum-paths 64
  exit-address-family
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{# endblock bgp_sessions #}
{# block bgp_peers_with_range #}
{% if vrf_bgp_pr.has_key(vrf) %}
{% for peer_key, bgp_peer in vrf_bgp_pr[vrf]|dictsort %}
  neighbor {{ bgp_peer['name'] }} peer-group
  neighbor {{ bgp_peer['name'] }} passive
  neighbor {{ bgp_peer['name'] }} remote-as {{ deployment_id_asn_map[DEVICE_METADATA['localhost']['deployment_id']] }}
  neighbor {{ bgp_peer['name'] }} ebgp-multihop 255
{% set vrf_lo1 = "" %}
{% if vrf_lo_intf[vrf] | length > 1 %}
{% set vrf_lo1 = vrf_lo_intf[vrf][1] %}
{% endif %}
{% for (name, prefix) in LOOPBACK_INTERFACE|pfx_filter %}
{% if name == vrf_lo1 %}
  neighbor {{ bgp_peer['name'] }} update-source {{ prefix | ip }}
{% endif %}
{% endfor %}
{% for ip_range in bgp_peer['ip_range'] %}
  bgp listen range {{ip_range}} peer-group {{ bgp_peer['name'] }}
{% endfor %}
  address-family ipv4
    neighbor {{ bgp_peer['name'] }} activate
    neighbor {{ bgp_peer['name'] }} soft-reconfiguration inbound
    neighbor {{ bgp_peer['name'] }} route-map FROM_BGP_SPEAKER_V4 in
    neighbor {{ bgp_peer['name'] }} route-map TO_BGP_SPEAKER_V4 out
    maximum-paths 64
  exit-address-family
  address-family ipv6
    neighbor {{ bgp_peer['name'] }} activate
    neighbor {{ bgp_peer['name'] }} soft-reconfiguration inbound
    maximum-paths 64
  exit-address-family
{% endfor %}
{% endif %}
{# endblock bgp_peers_with_range #}
!
{% endfor %}
route-map ISOLATE permit 10
set as-path prepend {{ DEVICE_METADATA['localhost']['bgp_asn'] }}
{% endif %}
{% endblock bgp %}
!
route-map set-next-hop-global-v6 permit 10
set ipv6 next-hop prefer-global
!
