{% from "common/functions.conf.j2" import get_ipv4_loopback_address, get_ipv6_loopback_address %}
!
! template: bgpd/bgpd.main.conf.j2
!
! bgp multiple-instance
!
! BGP configuration
!
! TSA configuration
!
ip prefix-list PL_LoopbackV4 permit {{ get_ipv4_loopback_address(LOOPBACK_INTERFACE, "Loopback0") | ip }}/32
!
{% if get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback0") != 'None' %}
ipv6 prefix-list PL_LoopbackV6 permit {{ get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback0") | replace('/128', '/64') | ip_network }}/64
{% endif %}
!
!
{% if DEVICE_METADATA['localhost']['sub_role'] == 'FrontEnd' or DEVICE_METADATA['localhost']['sub_role'] == 'BackEnd' %}
route-map HIDE_INTERNAL permit 10
  set community local-AS
!
{% endif %}
!
router bgp {{ DEVICE_METADATA['localhost']['bgp_asn'] }}
!
{% block bgp_init %}
  bgp log-neighbor-changes
  no bgp default ipv4-unicast
!
{% if constants.bgp.multipath_relax.enabled is defined and constants.bgp.multipath_relax.enabled %}
  bgp bestpath as-path multipath-relax
{% endif %}
!
{% if constants.bgp.graceful_restart.enabled is defined and constants.bgp.graceful_restart.enabled %}
  bgp graceful-restart restart-time {{ constants.bgp.graceful_restart.restart_time | default(240) }}
  bgp graceful-restart
  bgp graceful-restart preserve-fw-state
{% endif %}
!
{# set router-id #}
{% if multi_asic() %}
  bgp router-id {{ get_ipv4_loopback_address(LOOPBACK_INTERFACE, "Loopback4096") | ip }}
{% else %}
  bgp router-id {{ get_ipv4_loopback_address(LOOPBACK_INTERFACE, "Loopback0") | ip }}
{% endif %}
!
{# advertise loopback #}
  network {{ get_ipv4_loopback_address(LOOPBACK_INTERFACE, "Loopback0") | ip }}/32
{% if multi_asic()  %}
  network {{ get_ipv4_loopback_address(LOOPBACK_INTERFACE, "Loopback4096") | ip }}/32 route-map HIDE_INTERNAL
{% endif %}
!
{% if get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback0") != 'None' %}
  address-family ipv6
    network {{ get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback0") | ip }}/64
  exit-address-family
{% endif %}
{% if multi_asic() %}
{% if get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback4096") != 'None' %}
  address-family ipv6
    network {{ get_ipv6_loopback_address(LOOPBACK_INTERFACE, "Loopback4096") | ip }}/64 route-map HIDE_INTERNAL
  exit-address-family
{% endif %}
{% endif %}
{% endblock bgp_init %}
!
{% block vlan_advertisement %}
{% for (name, prefix) in VLAN_INTERFACE|pfx_filter %}
{% if prefix | ipv4 %}
  network {{ prefix }}
{% elif prefix | ipv6 %}
  address-family ipv6
   network {{ prefix }}
  exit-address-family
{% endif %}
{% endfor %}
{% endblock vlan_advertisement %}
!
!
{% if DEVICE_METADATA['localhost']['sub_role'] == 'FrontEnd' %}
  address-family ipv4
    redistribute connected route-map HIDE_INTERNAL
  exit-address-family
  address-family ipv6
    redistribute connected route-map HIDE_INTERNAL
  exit-address-family
{% endif %}
!
{% if constants.bgp.maximum_paths.enabled is defined and constants.bgp.maximum_paths.enabled %}
{% block maximum_paths %}
  address-family ipv4
    maximum-paths {{ constants.bgp.maximum_paths.ipv4 | default(64) }}
  exit-address-family
  address-family ipv6
    maximum-paths {{ constants.bgp.maximum_paths.ipv6 | default(64) }}
  exit-address-family
{% endblock maximum_paths %}
{% endif %}
!
{% if BGP_ROUTEMAPS %}
{% for name, routemap in BGP_ROUTEMAPS.iteritems() %}
route-map {{ name[0] }} {{ routemap['opttype'] }} {{ routemap['seqnumber'] }}
{% if routemap.has_key('matchcommunity') %}
 match community {{ routemap['matchcommunity'] }}
{% endif %}
{% if routemap.has_key('prefix_name') %}
 match ip address prefix-list {{ routemap['prefix_name'] }}
{% endif %}
{% if routemap.has_key('comm_range') %}
 set community {{ routemap['comm_range'] }}
{% endif %}
{% if routemap.has_key('applycost') %}
 set metric {{ routemap['applycost'] }}
{% endif %}
!
{% endfor %}
{% endif %}
!
{% block bgp_peers_with_range %}
{% if BGP_PEER_RANGE %}
{% for bgp_peer in BGP_PEER_RANGE.values() %}
 neighbor {{ bgp_peer['name'] }} peer-group
{% if bgp_peer.has_key('remote_as') %}
 neighbor {{ bgp_peer['name'] }} remote-as {{ bgp_peer['remote_as'] }}
{% endif %}
{% if bgp_peer.has_key('password') %}
 neighbor {{ bgp_peer['name'] }} password simple {{ bgp_peer['password'] }}
{% endif %}
{% if bgp_peer.has_key('description') %}
 neighbor {{ bgp_peer['name'] }} description {{ bgp_peer['description'] }}
{% endif %}
{% if bgp_peer.has_key('source') %}
 neighbor {{ bgp_peer['name'] }} update-source {{ bgp_peer['source'] }}
{% endif %}
{% endfor %}
{% for bgp_peer in BGP_PEER_RANGE.values() %}
{% if bgp_peer.has_key('ip_range') %}
{% for iplist in bgp_peer['ip_range'] %}
{% if iplist %}
 neighbor {{ iplist }} peer-group {{ bgp_peer['name'] }}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endblock bgp_peers_with_range %}
!
! end of template: bgpd/bgpd.main.conf.j2
!
