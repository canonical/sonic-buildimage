#!/usr/bin/python
'''
This script is used to monitor teamd processes in teamd docker container. 
Since Monit can only monitor the processes with unique names,
it is unable to do this monitoring for teamd processes. There can exist
multiple teamd processes which executes a same command but with different arguments. 
The number of teamd processes is decided by the number of port channels in Config_DB.
As such, we let Monit to monitor this script which will read number of port channels, 
then find whether there exists a process in Linux corresponding to a port channel. 
If this script fails to find such process, it will write an alert message into syslog file.
'''

import os
import subprocess
import re
import sys
import syslog
import psutil

from swsssdk import ConfigDBConnector


def retrieve_portchannels():
    port_channels = []

    config_db = ConfigDBConnector()
    config_db.connect()
    port_channel_table = config_db.get_table('PORTCHANNEL')

    for key in port_channel_table.keys():
        port_channels.append(key)

    return port_channels

def is_process_running(port_channel):
    for process in psutil.process_iter(['name', 'cmdline']):
        if port_channel in process.cmdline() and process.name() == 'teamd':
            return True
    return False;

def check_teamd_processes():
    port_channels = retrieve_portchannels()
 
    for port_channel in port_channels:
        if not is_process_running(port_channel):
            syslog.syslog(syslog.LOG_ERR, "Teamd process with {} is not running.".format(port_channel))

def main():
    check_teamd_processes()

if __name__ == '__main__':
    main()
